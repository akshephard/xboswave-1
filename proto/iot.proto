syntax = "proto3";

//This is designed to be included by the main xbos proto file and includes the
//definitions for the XBOS IoT devices
//
//Maintainer: Gabe Fierro
//Version 1.0
package xbospb;

import "nullabletypes.proto";
//import "parker.proto";

message URI {
    string namespace = 1;
    string value = 2;
}

message Triple {
    URI subject = 1;
    URI predicate = 2;
    URI object = 3;
}

enum FanMode {
    FanAuto = 0;
    FanOn = 1;
    FanOff = 2;
}

enum HVACMode {
    HVACModeOff = 0;
    HVACModeHeatOnly = 1;
    HVACModeCoolOnly = 2;
    HVACModeAuto = 3;
}

enum HVACState {
    HVACStateOff = 0;
    HVACStateHeatStage1 = 1;
    HVACStateCoolStage1 = 2;
    HVACStateHeatStage2 = 3;
    HVACStateCoolStage2 = 4;
}

message XBOSIoTDeviceState {
    // current time at device/service
    //unit:ns
    uint64 time = 1;
    // unique identifier for this request; used to line up with device state requests
    int64 requestid = 2;
    // any error that occured since the last device report. If requestid above is non-zero,
    // then this error corresponds to the request with the given requestid
    string error = 3;

    // XBOS IoT devices
    Thermostat thermostat = 4;
    Meter meter = 5;
    Light light = 6;
    EVSE evse = 7;
    WeatherStation weather_station = 8;
    WeatherStationPrediction weather_station_prediction = 9;
    ParkerState parker_state = 10;
}


message XBOSIoTDeviceActuation {
    // current time at device/service
    //unit:ns
    uint64 time = 1;
    // unique identifier for this request; used to line up with device state responses
    int64 requestid = 2;

    // XBOS IoT devices
    Thermostat thermostat = 3;
    Meter meter = 4;
    Light light = 5;
    EVSE evse = 6;
}

message XBOSIoTContext {
    // current time at device/service
    //unit:ns
    uint64 time = 1;
    // any triples this device wants to add about itself
    // these triples will be assumed to be generated by the entity
    // who has created/signed this message
    repeated Triple context = 2;
}

// Thermostat
message Thermostat {
    //Current temperature recorded by thermostat
    //unit:celsius
    Double temperature = 1;
    //unit:% rh
    Double relative_humidity = 2;
    //If true, then the thermostat is in override mode
    //unit: t/f
    Bool override = 3;
    //If true, the fan is on; else it is off
    //unit: t/f
    Bool fan_state = 4;
    //Current operating mode of the fan
    //unit: xbos/iot/FanMode
    FanMode fan_mode = 5;
    //Current operating mode of the HVAC
    //unit: xbos/iot/HVACMode
    HVACMode mode = 6;
    //Current HVAC state
    //unit: xbos/iot/HVACState
    HVACState state = 7;
    //number of heat stages enabled
    Int32 enabled_heat_stages = 8;
    //number of cool stages enabled
    Int32 enabled_cool_stages = 9;
    //heating setpoint
    //unit: celsius
    Double heating_setpoint = 10;
    //cooling setpoint
    //unit: celsius
    Double cooling_setpoint = 11;
}

message Meter {
    //unit: kW
    Double power = 1;
    //unit: V
    Double voltage = 2;
    //unit: kVA
    Double apparent_power = 3;
    //unit: KWh
    Double energy = 4;
}

message Light {
    // True if the light is on
    //unit: on/off
    Bool state = 1;
    // 100 is maximum brightness
    Int64 brightness = 2;
}

message EVSE {
    // maximum allowed current for charging
    //unit: A
    Double current_limit = 1;
    // active charge current
    //unit: A
    Double current = 2;
    // active charge voltage
    //unit: V
    Double voltage = 3;
    // seconds left until car is charged
    //unit: seconds
    Int32 charging_time_left = 4;
    // charge state of the EVSE
    //unit: on/off
    Bool state = 5;
}

message WeatherStation {
    // unit: celsius
    Double temperature = 1;
    // unit: unknown
    Double humidity = 2;
    // unit: km
    Double nearest_storm_distance = 3;
    // unit: degrees
    Int32 nearest_storm_bearing = 4;
    // precip intensity
    // unit: unknown
    Double precip_intensity = 5;
}

message WeatherStationPrediction {
    // time of the prediction (leave empty
    // unit: ns

    message Prediction {
        uint64 prediction_time = 1;
        WeatherStation prediction = 2;
    }

    repeated Prediction predictions = 1;
}
message ParkerState {

    // unit: hours
    Double compressor_working_hours = 1;

    // 1=clear
    Int64 clear_compressor_working_hours = 2;

    // 0/1/2/3=mute/reserved/mute-until-reset/restore buzzer for alarms
    Int64 buzzer_control = 3;

    // 0x0C/0x0D = stop defrost/start defrost
    Int64 defrost_control = 4;
    // 1=resistors will be activated for 6minutes
    Int64 start_resistors = 5;
    // on/standby
    Int64 on_standby_status = 6;
    Int64 light_status = 7;
    Int64 aux_output_status = 8;
    //counter reduces periodically (in 1/4 of a minute)
    //unit: seconds
    Double next_defrost_counter = 9;
    //digital_io_status & 0x0001
    Bool door_switch_input_status = 10;
    //digital_io_status & 0x0002
    Bool multipurpose_input_status = 11;
    //digital_io_status & 0x0100
    Bool compressor_status = 12;
    //digital_io_status & 0x0200
    Bool output_defrost_status = 13;
    //digital_io_status & 0x0400
    Bool fans_status = 14;
    //digital_io_status & 0x0800
    Bool output_k4_status = 15;
    //temperature measured by cabinet probe (in 10x actual value)
    //unit: C
    Double cabinet_temperature = 16;
    //temperature measured by evaporator probe (in 10x actual value)
    //unit: C
    Double evaporator_temperature = 17;
    //temperature measured by auxiliary probe (if present) (in 10x actual value)
    //unit: C
    Double auxiliary_temperature = 18;
    //alarm_status & 0x0100
    Bool probe1_failure_alarm = 19;
    //alarm_status & 0x0200
    Bool probe2_failure_alarm = 20;
    //alarm_status & 0x0400
    Bool probe3_failure_alarm = 21;
    //alarm_status & 0x1000
    Bool minimum_temperature_alarm = 22;
    //alarm_status & 0x2000
    Bool maximum_temperture_alarm = 23;
    //alarm_status & 0x4000
    Bool condensor_temperature_failure_alarm = 24;
    //alarm_status & 0x8000
    Bool condensor_pre_alarm = 25;
    //alarm_status & 0x0004
    Bool door_alarm = 26;
    //alarm_status & 0x0008
    Bool multipurpose_input_alarm = 27;
    //alarm_status & 0x0010
    Bool compressor_blocked_alarm = 28;
    //alarm_status & 0x0020
    Bool power_failure_alarm = 29;
    //alarm_status & 0x0080
    Bool rtc_error_alarm = 30;
    //regulator_flag_1 & 0x0100
    Bool energy_saving_regulator_flag = 31;
    //regulator_flag_1 & 0x0200
    Bool energy_saving_real_time_regulator_flag = 32;
    //regulator_flag_1 & 0x0400
    Bool service_request_regulator_flag = 33;
    //regulator_flag_2 & 0x0001; 1=standby
    Bool on_standby_regulator_flag = 34;
    //regulator_flag_2 & 0x0080
    Bool new_alarm_to_read_regulator_flag = 35;
    //regulator_flag_2 & 0x0700; 0/1/2/3 = no defrost active/defrost running/dripping/fans stop
    Int64 defrost_status_regulator_flag = 36;
    //active_setpoint=setpoint(when no energy saving); else=setpoint+r4
    //unit: C
    Double active_setpoint = 37;
    //time remaining to next defrost
    //unit: seconds
    Double time_until_defrost = 38;
    //current defrost counter countdown (in 1/4 of a minute)
    //unit: seconds
    Double current_defrost_counter = 39;
    //compressor delay in seconds
    //unit: seconds
    Double compressor_delay = 40;
    //number of HACCP alarms in history (max of last 9 stored)
    Int64 num_alarms_in_history = 41;
    //is energy saving mode active or not; digital_output_flags & 0x0100
    Bool energy_saving_status = 42;
    //digital_output_flags & 0x0200
    Bool service_request_status = 43;
    //digital_output_flags & 0x001
    Bool resistors_activated_by_aux_key_status = 44;
    //digital_output_flags & 0x002
    Bool evaporator_valve_state = 45;
    //digital_output_flags & 0x004
    Bool output_defrost_state = 46;
    //digital_output_flags & 0x008
    Bool output_lux_state = 47;
    //digital_output_flags & 0x0010
    Bool output_aux_state = 48;
    //activated by cabinet probe; digital_output_flags & 0x0020
    Bool resistors_state = 49;
    //digital_output_flags & 0x0040
    Bool output_alarm_state = 50;
    //digital_output_flags & 0x0080
    Bool second_compressor_state = 51;
    //setpoint
    Double setpoint = 52;
    //write=1 to clear HACCP list
    Int64 clear_alarm_history = 53;
    //write=1 to clear latest alarm flag
    Int64 clearn_new_alarm_flag = 54;
    //HACCP0_date + HACCP0_time
    Uint64 HACCP0_Datetime = 55;
    //b15-b13 of HACCP0_alarm_info
    Int64 HACCP0_alarm_type = 56;
    //using hour duration and minute duration from HACCP0_alarm_info
    //unit: minutes
    Double HACCP0_duration = 57;
    //value@0x0504: temperature
    //unit: C
    Double HACCP0_temperature = 58;
    //HACCP1_date + HACCP1_time
    Uint64 HACCP1_Datetime = 59;
    //b15-b13 of HACCP1_alarm_info
    Int64 HACCP1_alarm_type = 60;
    //using hour duration and minute duration from HACCP1_alarm_info
    //unit: minutes
    Double HACCP1_duration = 61;
    //value@0x0508: temperature
    //unit: C
    Double HACCP1_temperature = 62;
    //HACCP2_date + HACCP2_time
    Uint64 HACCP2_Datetime = 63;
    //b15-b13 of HACCP2_alarm_info
    Int64 HACCP2_alarm_type = 64;
    //using hour duration and minute duration from HACCP2_alarm_info
    //unit: minutes
    Double HACCP2_duration = 65;
    //value@0x050C: temperature
    //unit: C
    Double HACCP2_temperature = 66;
    //HACCP3_date + HACCP3_time
    Uint64 HACCP3_Datetime = 67;
    //b15-b13 of HACCP3_alarm_info
    Int64 HACCP3_alarm_type = 68;
    //using hour duration and minute duration from HACCP3_alarm_info
    //unit: minutes
    Double HACCP3_duration = 69;
    //value@0x0510: temperature
    //unit: C
    Double HACCP3_temperature = 70;
    //HACCP4_date + HACCP4_time
    Uint64 HACCP4_Datetime = 71;
    //b15-b13 of HACCP4_alarm_info
    Int64 HACCP4_alarm_type = 72;
    //using hour duration and minute duration from HACCP4_alarm_info
    //unit: minutes
    Double HACCP4_duration = 73;
    //value@0x0514: temperature
    //unit: C
    Double HACCP4_temperature = 74;
    //HACCP5_date + HACCP5_time
    Uint64 HACCP5_Datetime = 75;
    //b15-b13 of HACCP5_alarm_info
    Int64 HACCP5_alarm_type = 76;
    //using hour duration and minute duration from HACCP5_alarm_info
    //unit: minutes
    Double HACCP5_duration = 77;
    //value@0x0518: temperature
    //unit: C
    Double HACCP5_temperature = 78;
    //HACCP6_date + HACCP6_time
    Uint64 HACCP6_Datetime = 79;
    //b15-b13 of HACCP6_alarm_info
    Int64 HACCP6_alarm_type = 80;
    //using hour duration and minute duration from HACCP6_alarm_info
    //unit: minutes
    Double HACCP6_duration = 81;
    //value@0x051C: temperature
    //unit: C
    Double HACCP6_temperature = 82;
    //HACCP7_date + HACCP7_time
    Uint64 HACCP7_Datetime = 83;
    //b15-b13 of HACCP7_alarm_info
    Int64 HACCP7_alarm_type = 84;
    //using hour duration and minute duration from HACCP7_alarm_info
    //unit: minutes
    Double HACCP7_duration = 85;
    //value@0x0520: temperature
    //unit: C
    Double HACCP7_temperature = 86;
    //HACCP8_date + HACCP8_time
    Uint64 HACCP8_Datetime = 87;
    //b15-b13 of HACCP8_alarm_info
    Int64 HACCP8_alarm_type = 88;
    //using hour duration and minute duration from HACCP8_alarm_info
    //unit: minutes
    Double HACCP8_duration = 89;
    //value@0x0524: temperature
    //unit: C
    Double HACCP8_temperature = 90;
    //min working setpoint
    //unit: C
    Double r1 = 91;
    //max working setpoint
    //unit: C
    Double r2 = 92;
    //used for active_set_point calculation in energy saving mode; adds to active setpoint
    Double r4 = 93;
    //compressor delay after turning on controller
    //unit: minutes
    Double C0 = 94;
    //min time between 2 activations in succession of compressor
    //unit: minutes
    Double C1 = 95;
    //defrost interval (only if d8 = 0/1/2); 0 = the defrost at intervals will never be activated
    //unit: hours
    Double d0 = 96;
    //defrost duration if P3=0 or 2; max duration if P3=1
    //unit: minutes
    Double d3 = 97;
    //defrost delay when you turn on controller; only if d4=1
    //unit: minutes
    Double d5 = 98;
    //drip delay
    //unit: minutes
    Double d7 = 99;
    //kind of defrost interval; 0/1/2/3=defrost on when controller/compressor/evaporator temperature is below d9  is on for d0 hours/realtime
    Int64 d8 = 100;
    //measured input for low temp alarm; 0/1/2=cab/evap/aux (only if P4=1/2)
    Int64 A0 = 101;
    //temperature below which low temperature alarm is activated
    //unit: C
    Double A1 = 102;
    //kind of lower temp alarm; 0/1/2=disabled/working setpoint-A1/absolute (or A1)
    Int64 A2 = 103;
    //measured input for high temp alarm; 0/1/2=cab/evap/aux (only if P4=1/2)
    Int64 A3 = 104;
    //temperature above which high temperature alarm is activated
    //unit: C
    Double A4 = 105;
    //kind of high temp alarm; 0/1/2=disabled/working setpoint+A4/absolute (or A4)
    Int64 A5 = 106;
    //high temperature alarm delay after turning on controller; only if A3=0
    //unit: minutes
    Double A6 = 107;
    //temperature alarm delay
    //unit: minutes
    Double A7 = 108;
    //high temperature alarm delay after end of defrost; only if A3=0
    //unit: minutes
    Double A8 = 109;
    //high temperature alarm delay after deactivation of microport input only if A3=0
    //unit: minutes
    Double A9 = 110;
    //evap fan activity during normal operation; 0/1/2/3/4=off/on/in parallel with compressor/dependent on F1/off if compressor is off and depedent on F1 if compressor is on
    Int64 F0 = 111;
    //evap temperature above which evap fan is turned off; only if F0=3/4
    //unit: C
    Double F1 = 112;
    //evap fan activity during defrost and drip delay; 0/1/2 = off/on/dependent on F0
    Int64 F2 = 113;
    //fan delay after evap drip completes
    //unit: minutes
    Double F3 = 114;
    //first real time defrost activation time; only if d8=3
    //unit: hh:mm
    string Hd1 = 115;
    //second real time defrost activation time; only if d8=3
    //unit: hh:mm
    string Hd2 = 116;
    //third real time defrost activation time; only if d8=3
    //unit: hh:mm
    string Hd3 = 117;
    //fourth real time defrost activation time; only if d8=3
    //unit: hh:mm
    string Hd4 = 118;
    //fifth real time defrost activation time; only if d8=3
    //unit: hh:mm
    string Hd5 = 119;
    //sixth real time defrost activation time; only if d8=3
    //unit: hh:mm
    string Hd6 = 120;
}
