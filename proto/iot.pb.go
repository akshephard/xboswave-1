// Code generated by protoc-gen-go. DO NOT EDIT.
// source: iot.proto

package xbospb

/*
This is designed to be included by the main xbos proto file and includes the
definitions for the XBOS IoT devices

Maintainer: Gabe Fierro
Version 1.0
*/

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FanMode int32

const (
	FanMode_FanAuto FanMode = 0
	FanMode_FanOn   FanMode = 1
	FanMode_FanOff  FanMode = 2
)

var FanMode_name = map[int32]string{
	0: "FanAuto",
	1: "FanOn",
	2: "FanOff",
}
var FanMode_value = map[string]int32{
	"FanAuto": 0,
	"FanOn":   1,
	"FanOff":  2,
}

func (x FanMode) String() string {
	return proto.EnumName(FanMode_name, int32(x))
}
func (FanMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_iot_ba3bc239f511e68e, []int{0}
}

type HVACMode int32

const (
	HVACMode_HVACModeOff      HVACMode = 0
	HVACMode_HVACModeHeatOnly HVACMode = 1
	HVACMode_HVACModeCoolOnly HVACMode = 2
	HVACMode_HVACModeAuto     HVACMode = 3
)

var HVACMode_name = map[int32]string{
	0: "HVACModeOff",
	1: "HVACModeHeatOnly",
	2: "HVACModeCoolOnly",
	3: "HVACModeAuto",
}
var HVACMode_value = map[string]int32{
	"HVACModeOff":      0,
	"HVACModeHeatOnly": 1,
	"HVACModeCoolOnly": 2,
	"HVACModeAuto":     3,
}

func (x HVACMode) String() string {
	return proto.EnumName(HVACMode_name, int32(x))
}
func (HVACMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_iot_ba3bc239f511e68e, []int{1}
}

type HVACState int32

const (
	HVACState_HVACStateOff        HVACState = 0
	HVACState_HVACStateHeatStage1 HVACState = 1
	HVACState_HVACStateCoolStage1 HVACState = 2
	HVACState_HVACStateHeatStage2 HVACState = 3
	HVACState_HVACStateCoolStage2 HVACState = 4
)

var HVACState_name = map[int32]string{
	0: "HVACStateOff",
	1: "HVACStateHeatStage1",
	2: "HVACStateCoolStage1",
	3: "HVACStateHeatStage2",
	4: "HVACStateCoolStage2",
}
var HVACState_value = map[string]int32{
	"HVACStateOff":        0,
	"HVACStateHeatStage1": 1,
	"HVACStateCoolStage1": 2,
	"HVACStateHeatStage2": 3,
	"HVACStateCoolStage2": 4,
}

func (x HVACState) String() string {
	return proto.EnumName(HVACState_name, int32(x))
}
func (HVACState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_iot_ba3bc239f511e68e, []int{2}
}

type URI struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *URI) Reset()         { *m = URI{} }
func (m *URI) String() string { return proto.CompactTextString(m) }
func (*URI) ProtoMessage()    {}
func (*URI) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_ba3bc239f511e68e, []int{0}
}
func (m *URI) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_URI.Unmarshal(m, b)
}
func (m *URI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_URI.Marshal(b, m, deterministic)
}
func (dst *URI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_URI.Merge(dst, src)
}
func (m *URI) XXX_Size() int {
	return xxx_messageInfo_URI.Size(m)
}
func (m *URI) XXX_DiscardUnknown() {
	xxx_messageInfo_URI.DiscardUnknown(m)
}

var xxx_messageInfo_URI proto.InternalMessageInfo

func (m *URI) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *URI) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Triple struct {
	Subject              *URI     `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Predicate            *URI     `protobuf:"bytes,2,opt,name=predicate,proto3" json:"predicate,omitempty"`
	Object               *URI     `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Triple) Reset()         { *m = Triple{} }
func (m *Triple) String() string { return proto.CompactTextString(m) }
func (*Triple) ProtoMessage()    {}
func (*Triple) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_ba3bc239f511e68e, []int{1}
}
func (m *Triple) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Triple.Unmarshal(m, b)
}
func (m *Triple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Triple.Marshal(b, m, deterministic)
}
func (dst *Triple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Triple.Merge(dst, src)
}
func (m *Triple) XXX_Size() int {
	return xxx_messageInfo_Triple.Size(m)
}
func (m *Triple) XXX_DiscardUnknown() {
	xxx_messageInfo_Triple.DiscardUnknown(m)
}

var xxx_messageInfo_Triple proto.InternalMessageInfo

func (m *Triple) GetSubject() *URI {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *Triple) GetPredicate() *URI {
	if m != nil {
		return m.Predicate
	}
	return nil
}

func (m *Triple) GetObject() *URI {
	if m != nil {
		return m.Object
	}
	return nil
}

type XBOSIoTDeviceState struct {
	// current time at device/service
	// unit:ns
	Time uint64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	// unique identifier for this request; used to line up with device state requests
	Requestid int64 `protobuf:"varint,2,opt,name=requestid,proto3" json:"requestid,omitempty"`
	// any error that occured since the last device report. If requestid above is non-zero,
	// then this error corresponds to the request with the given requestid
	Error string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	// XBOS IoT devices
	Thermostat               *Thermostat               `protobuf:"bytes,4,opt,name=thermostat,proto3" json:"thermostat,omitempty"`
	Meter                    *Meter                    `protobuf:"bytes,5,opt,name=meter,proto3" json:"meter,omitempty"`
	Light                    *Light                    `protobuf:"bytes,6,opt,name=light,proto3" json:"light,omitempty"`
	Evse                     *EVSE                     `protobuf:"bytes,7,opt,name=evse,proto3" json:"evse,omitempty"`
	WeatherStation           *WeatherStation           `protobuf:"bytes,8,opt,name=weather_station,json=weatherStation,proto3" json:"weather_station,omitempty"`
	WeatherStationPrediction *WeatherStationPrediction `protobuf:"bytes,9,opt,name=weather_station_prediction,json=weatherStationPrediction,proto3" json:"weather_station_prediction,omitempty"`
	ParkerState              *ParkerState              `protobuf:"bytes,10,opt,name=parker_state,json=parkerState,proto3" json:"parker_state,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                  `json:"-"`
	XXX_unrecognized         []byte                    `json:"-"`
	XXX_sizecache            int32                     `json:"-"`
}

func (m *XBOSIoTDeviceState) Reset()         { *m = XBOSIoTDeviceState{} }
func (m *XBOSIoTDeviceState) String() string { return proto.CompactTextString(m) }
func (*XBOSIoTDeviceState) ProtoMessage()    {}
func (*XBOSIoTDeviceState) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_ba3bc239f511e68e, []int{2}
}
func (m *XBOSIoTDeviceState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XBOSIoTDeviceState.Unmarshal(m, b)
}
func (m *XBOSIoTDeviceState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XBOSIoTDeviceState.Marshal(b, m, deterministic)
}
func (dst *XBOSIoTDeviceState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XBOSIoTDeviceState.Merge(dst, src)
}
func (m *XBOSIoTDeviceState) XXX_Size() int {
	return xxx_messageInfo_XBOSIoTDeviceState.Size(m)
}
func (m *XBOSIoTDeviceState) XXX_DiscardUnknown() {
	xxx_messageInfo_XBOSIoTDeviceState.DiscardUnknown(m)
}

var xxx_messageInfo_XBOSIoTDeviceState proto.InternalMessageInfo

func (m *XBOSIoTDeviceState) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *XBOSIoTDeviceState) GetRequestid() int64 {
	if m != nil {
		return m.Requestid
	}
	return 0
}

func (m *XBOSIoTDeviceState) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *XBOSIoTDeviceState) GetThermostat() *Thermostat {
	if m != nil {
		return m.Thermostat
	}
	return nil
}

func (m *XBOSIoTDeviceState) GetMeter() *Meter {
	if m != nil {
		return m.Meter
	}
	return nil
}

func (m *XBOSIoTDeviceState) GetLight() *Light {
	if m != nil {
		return m.Light
	}
	return nil
}

func (m *XBOSIoTDeviceState) GetEvse() *EVSE {
	if m != nil {
		return m.Evse
	}
	return nil
}

func (m *XBOSIoTDeviceState) GetWeatherStation() *WeatherStation {
	if m != nil {
		return m.WeatherStation
	}
	return nil
}

func (m *XBOSIoTDeviceState) GetWeatherStationPrediction() *WeatherStationPrediction {
	if m != nil {
		return m.WeatherStationPrediction
	}
	return nil
}

func (m *XBOSIoTDeviceState) GetParkerState() *ParkerState {
	if m != nil {
		return m.ParkerState
	}
	return nil
}

type XBOSIoTDeviceActuation struct {
	// current time at device/service
	// unit:ns
	Time uint64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	// unique identifier for this request; used to line up with device state responses
	Requestid int64 `protobuf:"varint,2,opt,name=requestid,proto3" json:"requestid,omitempty"`
	// XBOS IoT devices
	Thermostat           *Thermostat `protobuf:"bytes,3,opt,name=thermostat,proto3" json:"thermostat,omitempty"`
	Meter                *Meter      `protobuf:"bytes,4,opt,name=meter,proto3" json:"meter,omitempty"`
	Light                *Light      `protobuf:"bytes,5,opt,name=light,proto3" json:"light,omitempty"`
	Evse                 *EVSE       `protobuf:"bytes,6,opt,name=evse,proto3" json:"evse,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *XBOSIoTDeviceActuation) Reset()         { *m = XBOSIoTDeviceActuation{} }
func (m *XBOSIoTDeviceActuation) String() string { return proto.CompactTextString(m) }
func (*XBOSIoTDeviceActuation) ProtoMessage()    {}
func (*XBOSIoTDeviceActuation) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_ba3bc239f511e68e, []int{3}
}
func (m *XBOSIoTDeviceActuation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XBOSIoTDeviceActuation.Unmarshal(m, b)
}
func (m *XBOSIoTDeviceActuation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XBOSIoTDeviceActuation.Marshal(b, m, deterministic)
}
func (dst *XBOSIoTDeviceActuation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XBOSIoTDeviceActuation.Merge(dst, src)
}
func (m *XBOSIoTDeviceActuation) XXX_Size() int {
	return xxx_messageInfo_XBOSIoTDeviceActuation.Size(m)
}
func (m *XBOSIoTDeviceActuation) XXX_DiscardUnknown() {
	xxx_messageInfo_XBOSIoTDeviceActuation.DiscardUnknown(m)
}

var xxx_messageInfo_XBOSIoTDeviceActuation proto.InternalMessageInfo

func (m *XBOSIoTDeviceActuation) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *XBOSIoTDeviceActuation) GetRequestid() int64 {
	if m != nil {
		return m.Requestid
	}
	return 0
}

func (m *XBOSIoTDeviceActuation) GetThermostat() *Thermostat {
	if m != nil {
		return m.Thermostat
	}
	return nil
}

func (m *XBOSIoTDeviceActuation) GetMeter() *Meter {
	if m != nil {
		return m.Meter
	}
	return nil
}

func (m *XBOSIoTDeviceActuation) GetLight() *Light {
	if m != nil {
		return m.Light
	}
	return nil
}

func (m *XBOSIoTDeviceActuation) GetEvse() *EVSE {
	if m != nil {
		return m.Evse
	}
	return nil
}

type XBOSIoTContext struct {
	// current time at device/service
	// unit:ns
	Time uint64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	// any triples this device wants to add about itself
	// these triples will be assumed to be generated by the entity
	// who has created/signed this message
	Context              []*Triple `protobuf:"bytes,2,rep,name=context,proto3" json:"context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *XBOSIoTContext) Reset()         { *m = XBOSIoTContext{} }
func (m *XBOSIoTContext) String() string { return proto.CompactTextString(m) }
func (*XBOSIoTContext) ProtoMessage()    {}
func (*XBOSIoTContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_ba3bc239f511e68e, []int{4}
}
func (m *XBOSIoTContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XBOSIoTContext.Unmarshal(m, b)
}
func (m *XBOSIoTContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XBOSIoTContext.Marshal(b, m, deterministic)
}
func (dst *XBOSIoTContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XBOSIoTContext.Merge(dst, src)
}
func (m *XBOSIoTContext) XXX_Size() int {
	return xxx_messageInfo_XBOSIoTContext.Size(m)
}
func (m *XBOSIoTContext) XXX_DiscardUnknown() {
	xxx_messageInfo_XBOSIoTContext.DiscardUnknown(m)
}

var xxx_messageInfo_XBOSIoTContext proto.InternalMessageInfo

func (m *XBOSIoTContext) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *XBOSIoTContext) GetContext() []*Triple {
	if m != nil {
		return m.Context
	}
	return nil
}

// Thermostat
type Thermostat struct {
	// Current temperature recorded by thermostat
	// unit:celsius
	Temperature *Double `protobuf:"bytes,1,opt,name=temperature,proto3" json:"temperature,omitempty"`
	// unit:% rh
	RelativeHumidity *Double `protobuf:"bytes,2,opt,name=relative_humidity,json=relativeHumidity,proto3" json:"relative_humidity,omitempty"`
	// If true, then the thermostat is in override mode
	// unit: t/f
	Override *Bool `protobuf:"bytes,3,opt,name=override,proto3" json:"override,omitempty"`
	// If true, the fan is on; else it is off
	// unit: t/f
	FanState *Bool `protobuf:"bytes,4,opt,name=fan_state,json=fanState,proto3" json:"fan_state,omitempty"`
	// Current operating mode of the fan
	// unit: xbos/iot/FanMode
	FanMode FanMode `protobuf:"varint,5,opt,name=fan_mode,json=fanMode,proto3,enum=xbospb.FanMode" json:"fan_mode,omitempty"`
	// Current operating mode of the HVAC
	// unit: xbos/iot/HVACMode
	Mode HVACMode `protobuf:"varint,6,opt,name=mode,proto3,enum=xbospb.HVACMode" json:"mode,omitempty"`
	// Current HVAC state
	// unit: xbos/iot/HVACState
	State HVACState `protobuf:"varint,7,opt,name=state,proto3,enum=xbospb.HVACState" json:"state,omitempty"`
	// number of heat stages enabled
	EnabledHeatStages *Int32 `protobuf:"bytes,8,opt,name=enabled_heat_stages,json=enabledHeatStages,proto3" json:"enabled_heat_stages,omitempty"`
	// number of cool stages enabled
	EnabledCoolStages *Int32 `protobuf:"bytes,9,opt,name=enabled_cool_stages,json=enabledCoolStages,proto3" json:"enabled_cool_stages,omitempty"`
	// heating setpoint
	// unit: celsius
	HeatingSetpoint *Double `protobuf:"bytes,10,opt,name=heating_setpoint,json=heatingSetpoint,proto3" json:"heating_setpoint,omitempty"`
	// cooling setpoint
	// unit: celsius
	CoolingSetpoint      *Double  `protobuf:"bytes,11,opt,name=cooling_setpoint,json=coolingSetpoint,proto3" json:"cooling_setpoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Thermostat) Reset()         { *m = Thermostat{} }
func (m *Thermostat) String() string { return proto.CompactTextString(m) }
func (*Thermostat) ProtoMessage()    {}
func (*Thermostat) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_ba3bc239f511e68e, []int{5}
}
func (m *Thermostat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Thermostat.Unmarshal(m, b)
}
func (m *Thermostat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Thermostat.Marshal(b, m, deterministic)
}
func (dst *Thermostat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Thermostat.Merge(dst, src)
}
func (m *Thermostat) XXX_Size() int {
	return xxx_messageInfo_Thermostat.Size(m)
}
func (m *Thermostat) XXX_DiscardUnknown() {
	xxx_messageInfo_Thermostat.DiscardUnknown(m)
}

var xxx_messageInfo_Thermostat proto.InternalMessageInfo

func (m *Thermostat) GetTemperature() *Double {
	if m != nil {
		return m.Temperature
	}
	return nil
}

func (m *Thermostat) GetRelativeHumidity() *Double {
	if m != nil {
		return m.RelativeHumidity
	}
	return nil
}

func (m *Thermostat) GetOverride() *Bool {
	if m != nil {
		return m.Override
	}
	return nil
}

func (m *Thermostat) GetFanState() *Bool {
	if m != nil {
		return m.FanState
	}
	return nil
}

func (m *Thermostat) GetFanMode() FanMode {
	if m != nil {
		return m.FanMode
	}
	return FanMode_FanAuto
}

func (m *Thermostat) GetMode() HVACMode {
	if m != nil {
		return m.Mode
	}
	return HVACMode_HVACModeOff
}

func (m *Thermostat) GetState() HVACState {
	if m != nil {
		return m.State
	}
	return HVACState_HVACStateOff
}

func (m *Thermostat) GetEnabledHeatStages() *Int32 {
	if m != nil {
		return m.EnabledHeatStages
	}
	return nil
}

func (m *Thermostat) GetEnabledCoolStages() *Int32 {
	if m != nil {
		return m.EnabledCoolStages
	}
	return nil
}

func (m *Thermostat) GetHeatingSetpoint() *Double {
	if m != nil {
		return m.HeatingSetpoint
	}
	return nil
}

func (m *Thermostat) GetCoolingSetpoint() *Double {
	if m != nil {
		return m.CoolingSetpoint
	}
	return nil
}

type Meter struct {
	// unit: kW
	Power *Double `protobuf:"bytes,1,opt,name=power,proto3" json:"power,omitempty"`
	// unit: V
	Voltage *Double `protobuf:"bytes,2,opt,name=voltage,proto3" json:"voltage,omitempty"`
	// unit: kVA
	ApparentPower *Double `protobuf:"bytes,3,opt,name=apparent_power,json=apparentPower,proto3" json:"apparent_power,omitempty"`
	// unit: KWh
	Energy               *Double  `protobuf:"bytes,4,opt,name=energy,proto3" json:"energy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Meter) Reset()         { *m = Meter{} }
func (m *Meter) String() string { return proto.CompactTextString(m) }
func (*Meter) ProtoMessage()    {}
func (*Meter) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_ba3bc239f511e68e, []int{6}
}
func (m *Meter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Meter.Unmarshal(m, b)
}
func (m *Meter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Meter.Marshal(b, m, deterministic)
}
func (dst *Meter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Meter.Merge(dst, src)
}
func (m *Meter) XXX_Size() int {
	return xxx_messageInfo_Meter.Size(m)
}
func (m *Meter) XXX_DiscardUnknown() {
	xxx_messageInfo_Meter.DiscardUnknown(m)
}

var xxx_messageInfo_Meter proto.InternalMessageInfo

func (m *Meter) GetPower() *Double {
	if m != nil {
		return m.Power
	}
	return nil
}

func (m *Meter) GetVoltage() *Double {
	if m != nil {
		return m.Voltage
	}
	return nil
}

func (m *Meter) GetApparentPower() *Double {
	if m != nil {
		return m.ApparentPower
	}
	return nil
}

func (m *Meter) GetEnergy() *Double {
	if m != nil {
		return m.Energy
	}
	return nil
}

type Light struct {
	// True if the light is on
	// unit: on/off
	State *Bool `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	// 100 is maximum brightness
	Brightness           *Int64   `protobuf:"bytes,2,opt,name=brightness,proto3" json:"brightness,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Light) Reset()         { *m = Light{} }
func (m *Light) String() string { return proto.CompactTextString(m) }
func (*Light) ProtoMessage()    {}
func (*Light) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_ba3bc239f511e68e, []int{7}
}
func (m *Light) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Light.Unmarshal(m, b)
}
func (m *Light) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Light.Marshal(b, m, deterministic)
}
func (dst *Light) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Light.Merge(dst, src)
}
func (m *Light) XXX_Size() int {
	return xxx_messageInfo_Light.Size(m)
}
func (m *Light) XXX_DiscardUnknown() {
	xxx_messageInfo_Light.DiscardUnknown(m)
}

var xxx_messageInfo_Light proto.InternalMessageInfo

func (m *Light) GetState() *Bool {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *Light) GetBrightness() *Int64 {
	if m != nil {
		return m.Brightness
	}
	return nil
}

type EVSE struct {
	// maximum allowed current for charging
	// unit: A
	CurrentLimit *Double `protobuf:"bytes,1,opt,name=current_limit,json=currentLimit,proto3" json:"current_limit,omitempty"`
	// active charge current
	// unit: A
	Current *Double `protobuf:"bytes,2,opt,name=current,proto3" json:"current,omitempty"`
	// active charge voltage
	// unit: V
	Voltage *Double `protobuf:"bytes,3,opt,name=voltage,proto3" json:"voltage,omitempty"`
	// seconds left until car is charged
	// unit: seconds
	ChargingTimeLeft *Int32 `protobuf:"bytes,4,opt,name=charging_time_left,json=chargingTimeLeft,proto3" json:"charging_time_left,omitempty"`
	// charge state of the EVSE
	// unit: on/off
	State                *Bool    `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EVSE) Reset()         { *m = EVSE{} }
func (m *EVSE) String() string { return proto.CompactTextString(m) }
func (*EVSE) ProtoMessage()    {}
func (*EVSE) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_ba3bc239f511e68e, []int{8}
}
func (m *EVSE) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EVSE.Unmarshal(m, b)
}
func (m *EVSE) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EVSE.Marshal(b, m, deterministic)
}
func (dst *EVSE) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EVSE.Merge(dst, src)
}
func (m *EVSE) XXX_Size() int {
	return xxx_messageInfo_EVSE.Size(m)
}
func (m *EVSE) XXX_DiscardUnknown() {
	xxx_messageInfo_EVSE.DiscardUnknown(m)
}

var xxx_messageInfo_EVSE proto.InternalMessageInfo

func (m *EVSE) GetCurrentLimit() *Double {
	if m != nil {
		return m.CurrentLimit
	}
	return nil
}

func (m *EVSE) GetCurrent() *Double {
	if m != nil {
		return m.Current
	}
	return nil
}

func (m *EVSE) GetVoltage() *Double {
	if m != nil {
		return m.Voltage
	}
	return nil
}

func (m *EVSE) GetChargingTimeLeft() *Int32 {
	if m != nil {
		return m.ChargingTimeLeft
	}
	return nil
}

func (m *EVSE) GetState() *Bool {
	if m != nil {
		return m.State
	}
	return nil
}

type WeatherStation struct {
	// unit: celsius
	Temperature *Double `protobuf:"bytes,1,opt,name=temperature,proto3" json:"temperature,omitempty"`
	// unit: unknown
	Humidity *Double `protobuf:"bytes,2,opt,name=humidity,proto3" json:"humidity,omitempty"`
	// unit: km
	NearestStormDistance *Double `protobuf:"bytes,3,opt,name=nearest_storm_distance,json=nearestStormDistance,proto3" json:"nearest_storm_distance,omitempty"`
	// unit: degrees
	NearestStormBearing *Int32 `protobuf:"bytes,4,opt,name=nearest_storm_bearing,json=nearestStormBearing,proto3" json:"nearest_storm_bearing,omitempty"`
	// precip intensity
	// unit: unknown
	PrecipIntensity      *Double  `protobuf:"bytes,5,opt,name=precip_intensity,json=precipIntensity,proto3" json:"precip_intensity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WeatherStation) Reset()         { *m = WeatherStation{} }
func (m *WeatherStation) String() string { return proto.CompactTextString(m) }
func (*WeatherStation) ProtoMessage()    {}
func (*WeatherStation) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_ba3bc239f511e68e, []int{9}
}
func (m *WeatherStation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WeatherStation.Unmarshal(m, b)
}
func (m *WeatherStation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WeatherStation.Marshal(b, m, deterministic)
}
func (dst *WeatherStation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeatherStation.Merge(dst, src)
}
func (m *WeatherStation) XXX_Size() int {
	return xxx_messageInfo_WeatherStation.Size(m)
}
func (m *WeatherStation) XXX_DiscardUnknown() {
	xxx_messageInfo_WeatherStation.DiscardUnknown(m)
}

var xxx_messageInfo_WeatherStation proto.InternalMessageInfo

func (m *WeatherStation) GetTemperature() *Double {
	if m != nil {
		return m.Temperature
	}
	return nil
}

func (m *WeatherStation) GetHumidity() *Double {
	if m != nil {
		return m.Humidity
	}
	return nil
}

func (m *WeatherStation) GetNearestStormDistance() *Double {
	if m != nil {
		return m.NearestStormDistance
	}
	return nil
}

func (m *WeatherStation) GetNearestStormBearing() *Int32 {
	if m != nil {
		return m.NearestStormBearing
	}
	return nil
}

func (m *WeatherStation) GetPrecipIntensity() *Double {
	if m != nil {
		return m.PrecipIntensity
	}
	return nil
}

type WeatherStationPrediction struct {
	Predictions          []*WeatherStationPrediction_Prediction `protobuf:"bytes,1,rep,name=predictions,proto3" json:"predictions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *WeatherStationPrediction) Reset()         { *m = WeatherStationPrediction{} }
func (m *WeatherStationPrediction) String() string { return proto.CompactTextString(m) }
func (*WeatherStationPrediction) ProtoMessage()    {}
func (*WeatherStationPrediction) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_ba3bc239f511e68e, []int{10}
}
func (m *WeatherStationPrediction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WeatherStationPrediction.Unmarshal(m, b)
}
func (m *WeatherStationPrediction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WeatherStationPrediction.Marshal(b, m, deterministic)
}
func (dst *WeatherStationPrediction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeatherStationPrediction.Merge(dst, src)
}
func (m *WeatherStationPrediction) XXX_Size() int {
	return xxx_messageInfo_WeatherStationPrediction.Size(m)
}
func (m *WeatherStationPrediction) XXX_DiscardUnknown() {
	xxx_messageInfo_WeatherStationPrediction.DiscardUnknown(m)
}

var xxx_messageInfo_WeatherStationPrediction proto.InternalMessageInfo

func (m *WeatherStationPrediction) GetPredictions() []*WeatherStationPrediction_Prediction {
	if m != nil {
		return m.Predictions
	}
	return nil
}

type WeatherStationPrediction_Prediction struct {
	PredictionTime       uint64          `protobuf:"varint,1,opt,name=prediction_time,json=predictionTime,proto3" json:"prediction_time,omitempty"`
	Prediction           *WeatherStation `protobuf:"bytes,2,opt,name=prediction,proto3" json:"prediction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *WeatherStationPrediction_Prediction) Reset()         { *m = WeatherStationPrediction_Prediction{} }
func (m *WeatherStationPrediction_Prediction) String() string { return proto.CompactTextString(m) }
func (*WeatherStationPrediction_Prediction) ProtoMessage()    {}
func (*WeatherStationPrediction_Prediction) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_ba3bc239f511e68e, []int{10, 0}
}
func (m *WeatherStationPrediction_Prediction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WeatherStationPrediction_Prediction.Unmarshal(m, b)
}
func (m *WeatherStationPrediction_Prediction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WeatherStationPrediction_Prediction.Marshal(b, m, deterministic)
}
func (dst *WeatherStationPrediction_Prediction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeatherStationPrediction_Prediction.Merge(dst, src)
}
func (m *WeatherStationPrediction_Prediction) XXX_Size() int {
	return xxx_messageInfo_WeatherStationPrediction_Prediction.Size(m)
}
func (m *WeatherStationPrediction_Prediction) XXX_DiscardUnknown() {
	xxx_messageInfo_WeatherStationPrediction_Prediction.DiscardUnknown(m)
}

var xxx_messageInfo_WeatherStationPrediction_Prediction proto.InternalMessageInfo

func (m *WeatherStationPrediction_Prediction) GetPredictionTime() uint64 {
	if m != nil {
		return m.PredictionTime
	}
	return 0
}

func (m *WeatherStationPrediction_Prediction) GetPrediction() *WeatherStation {
	if m != nil {
		return m.Prediction
	}
	return nil
}

type ParkerState struct {
	// unit: hours
	CompressorWorkingHours *Double `protobuf:"bytes,1,opt,name=compressor_working_hours,json=compressorWorkingHours,proto3" json:"compressor_working_hours,omitempty"`
	// on/standby
	OnStandbyStatus *Int64 `protobuf:"bytes,2,opt,name=on_standby_status,json=onStandbyStatus,proto3" json:"on_standby_status,omitempty"`
	LightStatus     *Int64 `protobuf:"bytes,3,opt,name=light_status,json=lightStatus,proto3" json:"light_status,omitempty"`
	AuxOutputStatus *Int64 `protobuf:"bytes,4,opt,name=aux_output_status,json=auxOutputStatus,proto3" json:"aux_output_status,omitempty"`
	// counter reduces periodically (in 1/4 of a minute)
	// unit: seconds
	NextDefrostCounter *Double `protobuf:"bytes,5,opt,name=next_defrost_counter,json=nextDefrostCounter,proto3" json:"next_defrost_counter,omitempty"`
	// digital_io_status & 0x0001
	DoorSwitchInputStatus *Bool `protobuf:"bytes,6,opt,name=door_switch_input_status,json=doorSwitchInputStatus,proto3" json:"door_switch_input_status,omitempty"`
	// digital_io_status & 0x0002
	MultipurposeInputStatus *Bool `protobuf:"bytes,7,opt,name=multipurpose_input_status,json=multipurposeInputStatus,proto3" json:"multipurpose_input_status,omitempty"`
	// digital_io_status & 0x0100
	CompressorStatus *Bool `protobuf:"bytes,8,opt,name=compressor_status,json=compressorStatus,proto3" json:"compressor_status,omitempty"`
	// digital_io_status & 0x0200
	OutputDefrostStatus *Bool `protobuf:"bytes,9,opt,name=output_defrost_status,json=outputDefrostStatus,proto3" json:"output_defrost_status,omitempty"`
	// digital_io_status & 0x0400
	FansStatus *Bool `protobuf:"bytes,10,opt,name=fans_status,json=fansStatus,proto3" json:"fans_status,omitempty"`
	// digital_io_status & 0x0800
	OutputK4Status *Bool `protobuf:"bytes,11,opt,name=output_k4_status,json=outputK4Status,proto3" json:"output_k4_status,omitempty"`
	// temperature measured by cabinet probe (in 10x actual value)
	// unit: C
	CabinetTemperature *Double `protobuf:"bytes,12,opt,name=cabinet_temperature,json=cabinetTemperature,proto3" json:"cabinet_temperature,omitempty"`
	// temperature measured by evaporator probe (in 10x actual value)
	// unit: C
	EvaporatorTemperature *Double `protobuf:"bytes,13,opt,name=evaporator_temperature,json=evaporatorTemperature,proto3" json:"evaporator_temperature,omitempty"`
	// temperature measured by auxiliary probe (if present) (in 10x actual value)
	// unit: C
	AuxiliaryTemperature *Double `protobuf:"bytes,14,opt,name=auxiliary_temperature,json=auxiliaryTemperature,proto3" json:"auxiliary_temperature,omitempty"`
	// alarm_status & 0x0100
	Probe1FailureAlarm *Bool `protobuf:"bytes,15,opt,name=probe1_failure_alarm,json=probe1FailureAlarm,proto3" json:"probe1_failure_alarm,omitempty"`
	// alarm_status & 0x0200
	Probe2FailureAlarm *Bool `protobuf:"bytes,16,opt,name=probe2_failure_alarm,json=probe2FailureAlarm,proto3" json:"probe2_failure_alarm,omitempty"`
	// alarm_status & 0x0400
	Probe3FailureAlarm *Bool `protobuf:"bytes,17,opt,name=probe3_failure_alarm,json=probe3FailureAlarm,proto3" json:"probe3_failure_alarm,omitempty"`
	// alarm_status & 0x1000
	MinimumTemperatureAlarm *Bool `protobuf:"bytes,18,opt,name=minimum_temperature_alarm,json=minimumTemperatureAlarm,proto3" json:"minimum_temperature_alarm,omitempty"`
	// alarm_status & 0x2000
	MaximumTempertureAlarm *Bool `protobuf:"bytes,19,opt,name=maximum_temperture_alarm,json=maximumTempertureAlarm,proto3" json:"maximum_temperture_alarm,omitempty"`
	// alarm_status & 0x4000
	CondensorTemperatureFailureAlarm *Bool `protobuf:"bytes,20,opt,name=condensor_temperature_failure_alarm,json=condensorTemperatureFailureAlarm,proto3" json:"condensor_temperature_failure_alarm,omitempty"`
	// alarm_status & 0x8000
	CondensorPreAlarm *Bool `protobuf:"bytes,21,opt,name=condensor_pre_alarm,json=condensorPreAlarm,proto3" json:"condensor_pre_alarm,omitempty"`
	// alarm_status & 0x0004
	DoorAlarm *Bool `protobuf:"bytes,22,opt,name=door_alarm,json=doorAlarm,proto3" json:"door_alarm,omitempty"`
	// alarm_status & 0x0008
	MultipurposeInputAlarm *Bool `protobuf:"bytes,23,opt,name=multipurpose_input_alarm,json=multipurposeInputAlarm,proto3" json:"multipurpose_input_alarm,omitempty"`
	// alarm_status & 0x0010
	CompressorBlockedAlarm *Bool `protobuf:"bytes,24,opt,name=compressor_blocked_alarm,json=compressorBlockedAlarm,proto3" json:"compressor_blocked_alarm,omitempty"`
	// alarm_status & 0x0020
	PowerFailureAlarm *Bool `protobuf:"bytes,25,opt,name=power_failure_alarm,json=powerFailureAlarm,proto3" json:"power_failure_alarm,omitempty"`
	// alarm_status & 0x0080
	RtcErrorAlarm *Bool `protobuf:"bytes,26,opt,name=rtc_error_alarm,json=rtcErrorAlarm,proto3" json:"rtc_error_alarm,omitempty"`
	// regulator_flag_1 & 0x0100
	EnergySavingRegulatorFlag *Bool `protobuf:"bytes,27,opt,name=energy_saving_regulator_flag,json=energySavingRegulatorFlag,proto3" json:"energy_saving_regulator_flag,omitempty"`
	// regulator_flag_1 & 0x0200
	EnergySavingRealTimeRegulatorFlag *Bool `protobuf:"bytes,28,opt,name=energy_saving_real_time_regulator_flag,json=energySavingRealTimeRegulatorFlag,proto3" json:"energy_saving_real_time_regulator_flag,omitempty"`
	// regulator_flag_1 & 0x0400
	ServiceRequestRegulatorFlag *Bool `protobuf:"bytes,29,opt,name=service_request_regulator_flag,json=serviceRequestRegulatorFlag,proto3" json:"service_request_regulator_flag,omitempty"`
	// regulator_flag_2 & 0x0001; 1=standby
	OnStandbyRegulatorFlag *Bool `protobuf:"bytes,30,opt,name=on_standby_regulator_flag,json=onStandbyRegulatorFlag,proto3" json:"on_standby_regulator_flag,omitempty"`
	// regulator_flag_2 & 0x0080
	NewAlarmToReadRegulatorFlag *Bool `protobuf:"bytes,31,opt,name=new_alarm_to_read_regulator_flag,json=newAlarmToReadRegulatorFlag,proto3" json:"new_alarm_to_read_regulator_flag,omitempty"`
	// regulator_flag_2 & 0x0700; 0/1/2/3 = no defrost active/defrost running/dripping/fans stop
	DefrostStatusRegulatorFlag *Bool `protobuf:"bytes,32,opt,name=defrost_status_regulator_flag,json=defrostStatusRegulatorFlag,proto3" json:"defrost_status_regulator_flag,omitempty"`
	// time remaining to next defrost
	// unit: seconds
	TimeUntilDefrost *Double `protobuf:"bytes,33,opt,name=time_until_defrost,json=timeUntilDefrost,proto3" json:"time_until_defrost,omitempty"`
	// current defrost counter countdown (in 1/4 of a minute)
	// unit: seconds
	CurrentDefrostCounter *Double `protobuf:"bytes,34,opt,name=current_defrost_counter,json=currentDefrostCounter,proto3" json:"current_defrost_counter,omitempty"`
	// compressor delay in seconds
	// unit: seconds
	CompressorDelay *Double `protobuf:"bytes,35,opt,name=compressor_delay,json=compressorDelay,proto3" json:"compressor_delay,omitempty"`
	// is energy saving mode active or not; digital_output_flags & 0x0100
	EnergySavingStatus *Bool `protobuf:"bytes,36,opt,name=energy_saving_status,json=energySavingStatus,proto3" json:"energy_saving_status,omitempty"`
	// digital_output_flags & 0x0200
	ServiceRequestStatus *Bool `protobuf:"bytes,37,opt,name=service_request_status,json=serviceRequestStatus,proto3" json:"service_request_status,omitempty"`
	// digital_output_flags & 0x001
	ResistorsActivatedByAuxKeyStatus *Bool `protobuf:"bytes,38,opt,name=resistors_activated_by_aux_key_status,json=resistorsActivatedByAuxKeyStatus,proto3" json:"resistors_activated_by_aux_key_status,omitempty"`
	// digital_output_flags & 0x002
	EvaporatorValveState *Bool `protobuf:"bytes,39,opt,name=evaporator_valve_state,json=evaporatorValveState,proto3" json:"evaporator_valve_state,omitempty"`
	// digital_output_flags & 0x004
	OutputDefrostState *Bool `protobuf:"bytes,40,opt,name=output_defrost_state,json=outputDefrostState,proto3" json:"output_defrost_state,omitempty"`
	// digital_output_flags & 0x008
	OutputLuxState *Bool `protobuf:"bytes,41,opt,name=output_lux_state,json=outputLuxState,proto3" json:"output_lux_state,omitempty"`
	// digital_output_flags & 0x0010
	OutputAuxState *Bool `protobuf:"bytes,42,opt,name=output_aux_state,json=outputAuxState,proto3" json:"output_aux_state,omitempty"`
	// activated by cabinet probe; digital_output_flags & 0x0020
	ResistorsState *Bool `protobuf:"bytes,43,opt,name=resistors_state,json=resistorsState,proto3" json:"resistors_state,omitempty"`
	// digital_output_flags & 0x0040
	OutputAlarmState *Bool `protobuf:"bytes,44,opt,name=output_alarm_state,json=outputAlarmState,proto3" json:"output_alarm_state,omitempty"`
	// digital_output_flags & 0x0080
	SecondCompressorState *Bool `protobuf:"bytes,45,opt,name=second_compressor_state,json=secondCompressorState,proto3" json:"second_compressor_state,omitempty"`
	// setpoint
	Setpoint *Double `protobuf:"bytes,46,opt,name=setpoint,proto3" json:"setpoint,omitempty"`
	// min working setpoint
	// unit: C
	R1 *Double `protobuf:"bytes,47,opt,name=r1,proto3" json:"r1,omitempty"`
	// max working setpoint
	// unit: C
	R2 *Double `protobuf:"bytes,48,opt,name=r2,proto3" json:"r2,omitempty"`
	// used for active_set_point calculation in energy saving mode; adds to active setpoint
	R4 *Double `protobuf:"bytes,49,opt,name=r4,proto3" json:"r4,omitempty"`
	// compressor delay after turning on controller
	// unit: minutes
	C0 *Double `protobuf:"bytes,50,opt,name=C0,json=c0,proto3" json:"C0,omitempty"`
	// min time between 2 activations in succession of compressor
	// unit: minutes
	C1 *Double `protobuf:"bytes,51,opt,name=C1,json=c1,proto3" json:"C1,omitempty"`
	// defrost interval (only if d8 = 0/1/2); 0 = the defrost at intervals will never be activated
	// unit: hours
	D0 *Double `protobuf:"bytes,52,opt,name=d0,proto3" json:"d0,omitempty"`
	// defrost duration if P3=0 or 2; max duration if P3=1
	// unit: minutes
	D3 *Double `protobuf:"bytes,53,opt,name=d3,proto3" json:"d3,omitempty"`
	// defrost delay when you turn on controller; only if d4=1
	// unit: minutes
	D5 *Double `protobuf:"bytes,54,opt,name=d5,proto3" json:"d5,omitempty"`
	// drip delay
	// unit: minutes
	D7 *Double `protobuf:"bytes,55,opt,name=d7,proto3" json:"d7,omitempty"`
	// kind of defrost interval; 0/1/2/3=defrost on when controller/compressor/evaporator temperature is below d9  is on for d0 hours/realtime
	D8 *Int64 `protobuf:"bytes,56,opt,name=d8,proto3" json:"d8,omitempty"`
	// measured input for low temp alarm; 0/1/2=cab/evap/aux (only if P4=1/2)
	A0 *Int64 `protobuf:"bytes,57,opt,name=A0,json=a0,proto3" json:"A0,omitempty"`
	// temperature below which low temperature alarm is activated
	// unit: C
	A1 *Double `protobuf:"bytes,58,opt,name=A1,json=a1,proto3" json:"A1,omitempty"`
	// kind of lower temp alarm; 0/1/2=disabled/working setpoint-A1/absolute (or A1)
	A2 *Int64 `protobuf:"bytes,59,opt,name=A2,json=a2,proto3" json:"A2,omitempty"`
	// measured input for high temp alarm; 0/1/2=cab/evap/aux (only if P4=1/2)
	A3 *Int64 `protobuf:"bytes,60,opt,name=A3,json=a3,proto3" json:"A3,omitempty"`
	// temperature above which high temperature alarm is activated
	// unit: C
	A4 *Double `protobuf:"bytes,61,opt,name=A4,json=a4,proto3" json:"A4,omitempty"`
	// kind of high temp alarm; 0/1/2=disabled/working setpoint+A4/absolute (or A4)
	A5 *Int64 `protobuf:"bytes,62,opt,name=A5,json=a5,proto3" json:"A5,omitempty"`
	// high temperature alarm delay after turning on controller; only if A3=0
	// unit: minutes
	A6 *Double `protobuf:"bytes,63,opt,name=A6,json=a6,proto3" json:"A6,omitempty"`
	// temperature alarm delay
	// unit: minutes
	A7 *Double `protobuf:"bytes,64,opt,name=A7,json=a7,proto3" json:"A7,omitempty"`
	// high temperature alarm delay after end of defrost; only if A3=0
	// unit: minutes
	A8 *Double `protobuf:"bytes,65,opt,name=A8,json=a8,proto3" json:"A8,omitempty"`
	// high temperature alarm delay after deactivation of microport input only if A3=0
	// unit: minutes
	A9 *Double `protobuf:"bytes,66,opt,name=A9,json=a9,proto3" json:"A9,omitempty"`
	// evap fan activity during normal operation; 0/1/2/3/4=off/on/in parallel with compressor/dependent on F1/off if compressor is off and depedent on F1 if compressor is on
	F0 *Int64 `protobuf:"bytes,67,opt,name=F0,json=f0,proto3" json:"F0,omitempty"`
	// evap temperature above which evap fan is turned off; only if F0=3/4
	// unit: C
	F1 *Double `protobuf:"bytes,68,opt,name=F1,json=f1,proto3" json:"F1,omitempty"`
	// evap fan activity during defrost and drip delay; 0/1/2 = off/on/dependent on F0
	F2 *Int64 `protobuf:"bytes,69,opt,name=F2,json=f2,proto3" json:"F2,omitempty"`
	// fan delay after evap drip completes
	// unit: minutes
	F3                   int64    `protobuf:"varint,70,opt,name=F3,json=f3,proto3" json:"F3,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParkerState) Reset()         { *m = ParkerState{} }
func (m *ParkerState) String() string { return proto.CompactTextString(m) }
func (*ParkerState) ProtoMessage()    {}
func (*ParkerState) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_ba3bc239f511e68e, []int{11}
}
func (m *ParkerState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParkerState.Unmarshal(m, b)
}
func (m *ParkerState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParkerState.Marshal(b, m, deterministic)
}
func (dst *ParkerState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParkerState.Merge(dst, src)
}
func (m *ParkerState) XXX_Size() int {
	return xxx_messageInfo_ParkerState.Size(m)
}
func (m *ParkerState) XXX_DiscardUnknown() {
	xxx_messageInfo_ParkerState.DiscardUnknown(m)
}

var xxx_messageInfo_ParkerState proto.InternalMessageInfo

func (m *ParkerState) GetCompressorWorkingHours() *Double {
	if m != nil {
		return m.CompressorWorkingHours
	}
	return nil
}

func (m *ParkerState) GetOnStandbyStatus() *Int64 {
	if m != nil {
		return m.OnStandbyStatus
	}
	return nil
}

func (m *ParkerState) GetLightStatus() *Int64 {
	if m != nil {
		return m.LightStatus
	}
	return nil
}

func (m *ParkerState) GetAuxOutputStatus() *Int64 {
	if m != nil {
		return m.AuxOutputStatus
	}
	return nil
}

func (m *ParkerState) GetNextDefrostCounter() *Double {
	if m != nil {
		return m.NextDefrostCounter
	}
	return nil
}

func (m *ParkerState) GetDoorSwitchInputStatus() *Bool {
	if m != nil {
		return m.DoorSwitchInputStatus
	}
	return nil
}

func (m *ParkerState) GetMultipurposeInputStatus() *Bool {
	if m != nil {
		return m.MultipurposeInputStatus
	}
	return nil
}

func (m *ParkerState) GetCompressorStatus() *Bool {
	if m != nil {
		return m.CompressorStatus
	}
	return nil
}

func (m *ParkerState) GetOutputDefrostStatus() *Bool {
	if m != nil {
		return m.OutputDefrostStatus
	}
	return nil
}

func (m *ParkerState) GetFansStatus() *Bool {
	if m != nil {
		return m.FansStatus
	}
	return nil
}

func (m *ParkerState) GetOutputK4Status() *Bool {
	if m != nil {
		return m.OutputK4Status
	}
	return nil
}

func (m *ParkerState) GetCabinetTemperature() *Double {
	if m != nil {
		return m.CabinetTemperature
	}
	return nil
}

func (m *ParkerState) GetEvaporatorTemperature() *Double {
	if m != nil {
		return m.EvaporatorTemperature
	}
	return nil
}

func (m *ParkerState) GetAuxiliaryTemperature() *Double {
	if m != nil {
		return m.AuxiliaryTemperature
	}
	return nil
}

func (m *ParkerState) GetProbe1FailureAlarm() *Bool {
	if m != nil {
		return m.Probe1FailureAlarm
	}
	return nil
}

func (m *ParkerState) GetProbe2FailureAlarm() *Bool {
	if m != nil {
		return m.Probe2FailureAlarm
	}
	return nil
}

func (m *ParkerState) GetProbe3FailureAlarm() *Bool {
	if m != nil {
		return m.Probe3FailureAlarm
	}
	return nil
}

func (m *ParkerState) GetMinimumTemperatureAlarm() *Bool {
	if m != nil {
		return m.MinimumTemperatureAlarm
	}
	return nil
}

func (m *ParkerState) GetMaximumTempertureAlarm() *Bool {
	if m != nil {
		return m.MaximumTempertureAlarm
	}
	return nil
}

func (m *ParkerState) GetCondensorTemperatureFailureAlarm() *Bool {
	if m != nil {
		return m.CondensorTemperatureFailureAlarm
	}
	return nil
}

func (m *ParkerState) GetCondensorPreAlarm() *Bool {
	if m != nil {
		return m.CondensorPreAlarm
	}
	return nil
}

func (m *ParkerState) GetDoorAlarm() *Bool {
	if m != nil {
		return m.DoorAlarm
	}
	return nil
}

func (m *ParkerState) GetMultipurposeInputAlarm() *Bool {
	if m != nil {
		return m.MultipurposeInputAlarm
	}
	return nil
}

func (m *ParkerState) GetCompressorBlockedAlarm() *Bool {
	if m != nil {
		return m.CompressorBlockedAlarm
	}
	return nil
}

func (m *ParkerState) GetPowerFailureAlarm() *Bool {
	if m != nil {
		return m.PowerFailureAlarm
	}
	return nil
}

func (m *ParkerState) GetRtcErrorAlarm() *Bool {
	if m != nil {
		return m.RtcErrorAlarm
	}
	return nil
}

func (m *ParkerState) GetEnergySavingRegulatorFlag() *Bool {
	if m != nil {
		return m.EnergySavingRegulatorFlag
	}
	return nil
}

func (m *ParkerState) GetEnergySavingRealTimeRegulatorFlag() *Bool {
	if m != nil {
		return m.EnergySavingRealTimeRegulatorFlag
	}
	return nil
}

func (m *ParkerState) GetServiceRequestRegulatorFlag() *Bool {
	if m != nil {
		return m.ServiceRequestRegulatorFlag
	}
	return nil
}

func (m *ParkerState) GetOnStandbyRegulatorFlag() *Bool {
	if m != nil {
		return m.OnStandbyRegulatorFlag
	}
	return nil
}

func (m *ParkerState) GetNewAlarmToReadRegulatorFlag() *Bool {
	if m != nil {
		return m.NewAlarmToReadRegulatorFlag
	}
	return nil
}

func (m *ParkerState) GetDefrostStatusRegulatorFlag() *Bool {
	if m != nil {
		return m.DefrostStatusRegulatorFlag
	}
	return nil
}

func (m *ParkerState) GetTimeUntilDefrost() *Double {
	if m != nil {
		return m.TimeUntilDefrost
	}
	return nil
}

func (m *ParkerState) GetCurrentDefrostCounter() *Double {
	if m != nil {
		return m.CurrentDefrostCounter
	}
	return nil
}

func (m *ParkerState) GetCompressorDelay() *Double {
	if m != nil {
		return m.CompressorDelay
	}
	return nil
}

func (m *ParkerState) GetEnergySavingStatus() *Bool {
	if m != nil {
		return m.EnergySavingStatus
	}
	return nil
}

func (m *ParkerState) GetServiceRequestStatus() *Bool {
	if m != nil {
		return m.ServiceRequestStatus
	}
	return nil
}

func (m *ParkerState) GetResistorsActivatedByAuxKeyStatus() *Bool {
	if m != nil {
		return m.ResistorsActivatedByAuxKeyStatus
	}
	return nil
}

func (m *ParkerState) GetEvaporatorValveState() *Bool {
	if m != nil {
		return m.EvaporatorValveState
	}
	return nil
}

func (m *ParkerState) GetOutputDefrostState() *Bool {
	if m != nil {
		return m.OutputDefrostState
	}
	return nil
}

func (m *ParkerState) GetOutputLuxState() *Bool {
	if m != nil {
		return m.OutputLuxState
	}
	return nil
}

func (m *ParkerState) GetOutputAuxState() *Bool {
	if m != nil {
		return m.OutputAuxState
	}
	return nil
}

func (m *ParkerState) GetResistorsState() *Bool {
	if m != nil {
		return m.ResistorsState
	}
	return nil
}

func (m *ParkerState) GetOutputAlarmState() *Bool {
	if m != nil {
		return m.OutputAlarmState
	}
	return nil
}

func (m *ParkerState) GetSecondCompressorState() *Bool {
	if m != nil {
		return m.SecondCompressorState
	}
	return nil
}

func (m *ParkerState) GetSetpoint() *Double {
	if m != nil {
		return m.Setpoint
	}
	return nil
}

func (m *ParkerState) GetR1() *Double {
	if m != nil {
		return m.R1
	}
	return nil
}

func (m *ParkerState) GetR2() *Double {
	if m != nil {
		return m.R2
	}
	return nil
}

func (m *ParkerState) GetR4() *Double {
	if m != nil {
		return m.R4
	}
	return nil
}

func (m *ParkerState) GetC0() *Double {
	if m != nil {
		return m.C0
	}
	return nil
}

func (m *ParkerState) GetC1() *Double {
	if m != nil {
		return m.C1
	}
	return nil
}

func (m *ParkerState) GetD0() *Double {
	if m != nil {
		return m.D0
	}
	return nil
}

func (m *ParkerState) GetD3() *Double {
	if m != nil {
		return m.D3
	}
	return nil
}

func (m *ParkerState) GetD5() *Double {
	if m != nil {
		return m.D5
	}
	return nil
}

func (m *ParkerState) GetD7() *Double {
	if m != nil {
		return m.D7
	}
	return nil
}

func (m *ParkerState) GetD8() *Int64 {
	if m != nil {
		return m.D8
	}
	return nil
}

func (m *ParkerState) GetA0() *Int64 {
	if m != nil {
		return m.A0
	}
	return nil
}

func (m *ParkerState) GetA1() *Double {
	if m != nil {
		return m.A1
	}
	return nil
}

func (m *ParkerState) GetA2() *Int64 {
	if m != nil {
		return m.A2
	}
	return nil
}

func (m *ParkerState) GetA3() *Int64 {
	if m != nil {
		return m.A3
	}
	return nil
}

func (m *ParkerState) GetA4() *Double {
	if m != nil {
		return m.A4
	}
	return nil
}

func (m *ParkerState) GetA5() *Int64 {
	if m != nil {
		return m.A5
	}
	return nil
}

func (m *ParkerState) GetA6() *Double {
	if m != nil {
		return m.A6
	}
	return nil
}

func (m *ParkerState) GetA7() *Double {
	if m != nil {
		return m.A7
	}
	return nil
}

func (m *ParkerState) GetA8() *Double {
	if m != nil {
		return m.A8
	}
	return nil
}

func (m *ParkerState) GetA9() *Double {
	if m != nil {
		return m.A9
	}
	return nil
}

func (m *ParkerState) GetF0() *Int64 {
	if m != nil {
		return m.F0
	}
	return nil
}

func (m *ParkerState) GetF1() *Double {
	if m != nil {
		return m.F1
	}
	return nil
}

func (m *ParkerState) GetF2() *Int64 {
	if m != nil {
		return m.F2
	}
	return nil
}

func (m *ParkerState) GetF3() int64 {
	if m != nil {
		return m.F3
	}
	return 0
}

func init() {
	proto.RegisterType((*URI)(nil), "xbospb.URI")
	proto.RegisterType((*Triple)(nil), "xbospb.Triple")
	proto.RegisterType((*XBOSIoTDeviceState)(nil), "xbospb.XBOSIoTDeviceState")
	proto.RegisterType((*XBOSIoTDeviceActuation)(nil), "xbospb.XBOSIoTDeviceActuation")
	proto.RegisterType((*XBOSIoTContext)(nil), "xbospb.XBOSIoTContext")
	proto.RegisterType((*Thermostat)(nil), "xbospb.Thermostat")
	proto.RegisterType((*Meter)(nil), "xbospb.Meter")
	proto.RegisterType((*Light)(nil), "xbospb.Light")
	proto.RegisterType((*EVSE)(nil), "xbospb.EVSE")
	proto.RegisterType((*WeatherStation)(nil), "xbospb.WeatherStation")
	proto.RegisterType((*WeatherStationPrediction)(nil), "xbospb.WeatherStationPrediction")
	proto.RegisterType((*WeatherStationPrediction_Prediction)(nil), "xbospb.WeatherStationPrediction.Prediction")
	proto.RegisterType((*ParkerState)(nil), "xbospb.ParkerState")
	proto.RegisterEnum("xbospb.FanMode", FanMode_name, FanMode_value)
	proto.RegisterEnum("xbospb.HVACMode", HVACMode_name, HVACMode_value)
	proto.RegisterEnum("xbospb.HVACState", HVACState_name, HVACState_value)
}

func init() { proto.RegisterFile("iot.proto", fileDescriptor_iot_ba3bc239f511e68e) }

var fileDescriptor_iot_ba3bc239f511e68e = []byte{
	// 2190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x59, 0x59, 0x77, 0xdb, 0xb8,
	0x15, 0x1e, 0xc9, 0x5b, 0x7c, 0xe5, 0xd8, 0x32, 0xbc, 0x04, 0xc9, 0x4c, 0x52, 0x8f, 0xb2, 0x8e,
	0xd3, 0xa4, 0xb6, 0xbc, 0x24, 0x9e, 0x64, 0x92, 0x91, 0xb7, 0xda, 0x67, 0x92, 0x26, 0xa5, 0x9d,
	0x4c, 0x97, 0xd3, 0xf2, 0x40, 0x22, 0x64, 0xb3, 0xa1, 0x08, 0x16, 0x04, 0xbd, 0x3c, 0xf5, 0xf4,
	0x2f, 0xf5, 0xa1, 0xaf, 0xfd, 0x15, 0x3d, 0xa7, 0xbf, 0xa1, 0x4f, 0x7d, 0xed, 0x5b, 0x0f, 0x16,
	0x52, 0x24, 0x03, 0x66, 0x66, 0xfa, 0x26, 0xf2, 0x5b, 0x00, 0xdc, 0x0b, 0xe0, 0x02, 0x14, 0x4c,
	0xfa, 0x4c, 0x3c, 0x8e, 0x38, 0x13, 0x0c, 0x8d, 0x5f, 0x74, 0x59, 0x1c, 0x75, 0x6f, 0xcc, 0x85,
	0x49, 0x10, 0x90, 0x6e, 0x40, 0xc5, 0x65, 0x44, 0x63, 0x0d, 0xb6, 0xb6, 0x60, 0xe4, 0x9d, 0x73,
	0x88, 0xbe, 0x80, 0xc9, 0x90, 0x0c, 0x68, 0x1c, 0x91, 0x1e, 0xc5, 0xb5, 0xa5, 0xda, 0x83, 0x49,
	0x67, 0xf8, 0x02, 0xcd, 0xc3, 0xd8, 0x19, 0x09, 0x12, 0x8a, 0xeb, 0x0a, 0xd1, 0x0f, 0xad, 0xbf,
	0xc0, 0xf8, 0x31, 0xf7, 0xa3, 0x80, 0xa2, 0xbb, 0x30, 0x11, 0x27, 0xdd, 0x3f, 0xd1, 0x9e, 0x50,
	0xda, 0x46, 0xbb, 0xf1, 0x58, 0xb7, 0xf9, 0xf8, 0x9d, 0x73, 0xe8, 0xa4, 0x18, 0xfa, 0x0a, 0x26,
	0x23, 0x4e, 0x3d, 0xbf, 0x47, 0x84, 0xb6, 0x2a, 0x11, 0x87, 0x28, 0xba, 0x0d, 0xe3, 0x4c, 0x1b,
	0x8e, 0x7c, 0xcc, 0x33, 0x50, 0xeb, 0x9f, 0x23, 0x80, 0x7e, 0xb3, 0xfd, 0xe6, 0xe8, 0x90, 0x1d,
	0xef, 0xd2, 0x33, 0xbf, 0x47, 0x8f, 0x84, 0xd4, 0x22, 0x18, 0x15, 0xfe, 0x40, 0x0f, 0x63, 0xd4,
	0x51, 0xbf, 0xe5, 0xf8, 0x38, 0xfd, 0x73, 0x42, 0x63, 0xe1, 0x7b, 0xaa, 0xe9, 0x11, 0x67, 0xf8,
	0x42, 0x8e, 0x8f, 0x72, 0xce, 0xb8, 0x6a, 0x6c, 0xd2, 0xd1, 0x0f, 0xa8, 0x0d, 0x20, 0x4e, 0x29,
	0x1f, 0xb0, 0x58, 0x10, 0x81, 0x47, 0x55, 0x3f, 0x50, 0xda, 0x8f, 0xe3, 0x0c, 0x71, 0x72, 0x2c,
	0x74, 0x1b, 0xc6, 0x06, 0x54, 0x50, 0x8e, 0xc7, 0x14, 0xfd, 0x6a, 0x4a, 0x7f, 0x2d, 0x5f, 0x3a,
	0x1a, 0x93, 0xa4, 0xc0, 0x3f, 0x39, 0x15, 0x78, 0xbc, 0x48, 0x7a, 0x25, 0x5f, 0x3a, 0x1a, 0x43,
	0x4b, 0x30, 0x4a, 0xcf, 0x62, 0x8a, 0x27, 0x14, 0x67, 0x2a, 0xe5, 0xec, 0xbd, 0x3f, 0xda, 0x73,
	0x14, 0x82, 0x5e, 0xc2, 0xcc, 0x39, 0x25, 0xb2, 0x71, 0x57, 0xb6, 0xed, 0xb3, 0x10, 0x5f, 0x51,
	0xe4, 0xc5, 0x94, 0xfc, 0xbd, 0x86, 0x8f, 0x34, 0xea, 0x4c, 0x9f, 0x17, 0x9e, 0xd1, 0x1f, 0xe1,
	0x46, 0xc9, 0xc0, 0xd5, 0x19, 0x50, 0x5e, 0x93, 0xca, 0x6b, 0xc9, 0xee, 0xf5, 0x36, 0xe3, 0x39,
	0xf8, 0xbc, 0x02, 0x41, 0x9b, 0x30, 0x15, 0x11, 0xfe, 0xc1, 0xd8, 0x53, 0x0c, 0xca, 0x71, 0x2e,
	0x75, 0x7c, 0xab, 0x30, 0x95, 0x33, 0xa7, 0x11, 0x0d, 0x1f, 0x5a, 0xff, 0xae, 0xc1, 0x62, 0x21,
	0xaf, 0x9d, 0x9e, 0x48, 0x74, 0x97, 0x7f, 0x7a, 0x6e, 0x8b, 0x59, 0x1c, 0xf9, 0x69, 0x59, 0x1c,
	0xfd, 0x31, 0x59, 0x1c, 0xfb, 0x11, 0x59, 0x1c, 0xaf, 0xca, 0x62, 0xeb, 0x57, 0x30, 0x6d, 0xc6,
	0xba, 0xc3, 0x42, 0x41, 0x2f, 0x84, 0x75, 0x8c, 0x0f, 0x60, 0xa2, 0xa7, 0x61, 0x5c, 0x5f, 0x1a,
	0x79, 0xd0, 0x68, 0x4f, 0x67, 0x43, 0x50, 0x4b, 0xd0, 0x49, 0xe1, 0xd6, 0x3f, 0x46, 0x01, 0x86,
	0xc3, 0x42, 0x2b, 0xd0, 0x10, 0x74, 0x10, 0x51, 0x4e, 0x44, 0xc2, 0xa9, 0x59, 0x9e, 0x99, 0x78,
	0x97, 0x25, 0xdd, 0x80, 0x3a, 0x79, 0x0a, 0x7a, 0x06, 0xb3, 0x9c, 0x06, 0x44, 0xf8, 0x67, 0xd4,
	0x3d, 0x4d, 0x06, 0xbe, 0xe7, 0x8b, 0x4b, 0xb3, 0x5a, 0xcb, 0xba, 0x66, 0x4a, 0x3c, 0x30, 0x3c,
	0xf4, 0x00, 0xae, 0xb0, 0x33, 0xca, 0xb9, 0xef, 0x51, 0x13, 0xeb, 0x6c, 0xcc, 0xdb, 0x8c, 0x05,
	0x4e, 0x86, 0xca, 0xcd, 0xa0, 0x4f, 0x42, 0x33, 0x33, 0x46, 0x6d, 0xd4, 0x3e, 0x09, 0xf5, 0x82,
	0x5e, 0x06, 0xf9, 0xdb, 0x1d, 0x30, 0x8f, 0xaa, 0x60, 0x4f, 0xb7, 0x67, 0x52, 0xe6, 0x3e, 0x09,
	0x5f, 0x33, 0x8f, 0x3a, 0x13, 0x7d, 0xfd, 0x03, 0xdd, 0x81, 0x51, 0xc5, 0x1b, 0x57, 0xbc, 0x66,
	0xca, 0x3b, 0x78, 0xdf, 0xd9, 0x51, 0x44, 0x85, 0xa2, 0xfb, 0x30, 0xa6, 0x1b, 0x9e, 0x50, 0xb4,
	0xd9, 0x3c, 0x4d, 0x4f, 0x48, 0x8d, 0xa3, 0x6f, 0x60, 0x8e, 0x86, 0x72, 0xcf, 0xf4, 0xdc, 0x53,
	0x4a, 0x84, 0xec, 0xee, 0x09, 0x8d, 0xcd, 0x3a, 0xcb, 0x52, 0x7e, 0x18, 0x8a, 0xb5, 0xb6, 0x33,
	0x6b, 0x98, 0x07, 0x94, 0x88, 0x23, 0xc5, 0xcb, 0xcb, 0x7b, 0x8c, 0x05, 0xa9, 0x7c, 0xf2, 0x53,
	0xf2, 0x1d, 0xc6, 0x02, 0x23, 0xdf, 0x82, 0xa6, 0x6c, 0xd5, 0x0f, 0x4f, 0xdc, 0x98, 0x8a, 0x88,
	0xf9, 0xa1, 0x30, 0x8b, 0xa8, 0x9c, 0x89, 0x19, 0xc3, 0x3b, 0x32, 0x34, 0x29, 0x95, 0x2d, 0x16,
	0xa4, 0x0d, 0xbb, 0xd4, 0xf0, 0x52, 0x69, 0xeb, 0xef, 0x35, 0x18, 0x53, 0x33, 0x1d, 0xdd, 0x81,
	0xb1, 0x88, 0x9d, 0x53, 0x5e, 0x31, 0x6d, 0x34, 0x28, 0xe7, 0xe6, 0x19, 0x0b, 0x64, 0x8f, 0x2b,
	0xa6, 0x49, 0x0a, 0xa3, 0x0d, 0x98, 0x26, 0x51, 0x44, 0x38, 0x0d, 0x85, 0xab, 0x8d, 0x47, 0xac,
	0x82, 0xab, 0x29, 0xeb, 0xad, 0x6a, 0xe0, 0x1e, 0x8c, 0xd3, 0x90, 0xf2, 0x93, 0x4b, 0x33, 0x4f,
	0xca, 0x74, 0x83, 0xb6, 0x7e, 0x07, 0x63, 0x6a, 0xf1, 0xa1, 0x56, 0x9a, 0xde, 0x9a, 0x65, 0x5e,
	0x99, 0xcc, 0x3e, 0x02, 0xe8, 0x72, 0xc9, 0x0e, 0x69, 0x1c, 0x9b, 0x8e, 0xe7, 0x33, 0xb2, 0xb9,
	0xee, 0xe4, 0x08, 0xad, 0xff, 0xd4, 0x60, 0x54, 0xae, 0x5a, 0xb4, 0x06, 0x57, 0x7b, 0x09, 0x57,
	0x43, 0x08, 0xfc, 0x81, 0x2f, 0x2a, 0x62, 0x33, 0x65, 0x48, 0xaf, 0x24, 0x47, 0x2d, 0x5f, 0xfd,
	0x5c, 0x15, 0x22, 0x03, 0xe7, 0x83, 0x39, 0xf2, 0xe9, 0x60, 0x3e, 0x03, 0xd4, 0x3b, 0x25, 0xfc,
	0x44, 0xa6, 0x58, 0xee, 0x11, 0x6e, 0x40, 0xfb, 0xa2, 0xbc, 0x63, 0xe9, 0xa9, 0xd5, 0x4c, 0x89,
	0xc7, 0xfe, 0x80, 0xbe, 0xa2, 0xfd, 0x5c, 0x84, 0xc6, 0x2a, 0x23, 0xd4, 0xfa, 0x5b, 0x1d, 0xa6,
	0x8b, 0xbb, 0xfe, 0xff, 0xb1, 0x9b, 0x2c, 0xc3, 0x95, 0x1f, 0xd8, 0x44, 0x32, 0x1c, 0xed, 0xc2,
	0x62, 0x48, 0x09, 0xa7, 0xb1, 0x5c, 0x67, 0x8c, 0x0f, 0x5c, 0xcf, 0x8f, 0x05, 0x09, 0x7b, 0x55,
	0xa1, 0x98, 0x37, 0xec, 0x23, 0x49, 0xde, 0x35, 0x5c, 0xd4, 0x81, 0x85, 0xa2, 0x4b, 0x97, 0x12,
	0xee, 0x87, 0x27, 0xf6, 0xd0, 0xcc, 0xe5, 0x3d, 0xb6, 0x35, 0x53, 0x2e, 0x9e, 0x88, 0xd3, 0x9e,
	0x1f, 0xb9, 0x7e, 0x28, 0x68, 0x18, 0xcb, 0xce, 0x8f, 0xd9, 0x17, 0x8f, 0xe6, 0x1d, 0xa6, 0xb4,
	0xd6, 0xbf, 0x6a, 0x80, 0xab, 0x4a, 0x25, 0x7a, 0x0d, 0x8d, 0x61, 0x81, 0x8d, 0x71, 0x4d, 0xed,
	0xe4, 0x0f, 0x7f, 0xa8, 0xc2, 0x3e, 0xce, 0x15, 0xdb, 0xbc, 0xfe, 0xc6, 0x00, 0x20, 0x67, 0x7e,
	0x1f, 0x66, 0x86, 0xa0, 0x9b, 0xab, 0x20, 0xd3, 0xc3, 0xd7, 0x32, 0xff, 0x68, 0x13, 0x20, 0x57,
	0xe6, 0xeb, 0x9f, 0x3c, 0x32, 0xe4, 0x98, 0xad, 0xff, 0xde, 0x84, 0x46, 0xae, 0x66, 0xa3, 0x03,
	0xc0, 0x3d, 0x36, 0x88, 0x38, 0x8d, 0x63, 0xc6, 0xdd, 0x73, 0xc6, 0x3f, 0xc8, 0xa9, 0x78, 0xca,
	0x12, 0x1e, 0x57, 0xcc, 0x8c, 0xc5, 0x21, 0xff, 0x7b, 0x4d, 0x3f, 0x90, 0x6c, 0xb4, 0x05, 0xb3,
	0x4c, 0x95, 0x82, 0xd0, 0xeb, 0x5e, 0xaa, 0x92, 0x90, 0x54, 0x2c, 0xc9, 0x19, 0x26, 0x6b, 0x82,
	0xa4, 0x1d, 0x29, 0x16, 0x5a, 0x81, 0x29, 0x55, 0x69, 0x53, 0xd5, 0x88, 0x4d, 0xd5, 0x50, 0x14,
	0xa3, 0xd8, 0x82, 0x59, 0x92, 0x5c, 0xb8, 0x2c, 0x11, 0x51, 0x92, 0xc9, 0x46, 0xad, 0x8d, 0x91,
	0xe4, 0xe2, 0x8d, 0xa2, 0x19, 0xe9, 0xb7, 0x30, 0x1f, 0xd2, 0x0b, 0xe1, 0x7a, 0xb4, 0xcf, 0x59,
	0x2c, 0xdc, 0x1e, 0x4b, 0xc2, 0xe1, 0x61, 0xaf, 0x3c, 0x5a, 0x24, 0xb9, 0xbb, 0x9a, 0xba, 0xa3,
	0x99, 0x68, 0x0f, 0xb0, 0xc7, 0x18, 0x77, 0xe3, 0x73, 0x5f, 0xf4, 0x4e, 0x5d, 0x3f, 0xcc, 0xf5,
	0x61, 0xdc, 0xb2, 0x14, 0x17, 0x24, 0xfb, 0x48, 0x91, 0x0f, 0xc3, 0x61, 0x47, 0x0e, 0xe0, 0xfa,
	0x20, 0x09, 0x84, 0x1f, 0x25, 0x3c, 0x62, 0x31, 0x2d, 0xfa, 0x4c, 0x58, 0x7c, 0xae, 0xe5, 0xe9,
	0x79, 0xa7, 0x2d, 0x98, 0xcd, 0x25, 0xd1, 0x38, 0x5c, 0xb1, 0x38, 0x34, 0x87, 0xb4, 0x2c, 0x1a,
	0x0b, 0x26, 0x88, 0x69, 0x3c, 0x8c, 0x7c, 0xd2, 0x22, 0x9f, 0xd3, 0x54, 0x13, 0x0e, 0xe3, 0xf0,
	0x08, 0x1a, 0x7d, 0x12, 0xc6, 0xa9, 0x0e, 0x2c, 0x3a, 0x90, 0x04, 0x43, 0xdf, 0x84, 0xa6, 0x69,
	0xf0, 0xc3, 0x7a, 0xaa, 0x69, 0x58, 0x34, 0xd3, 0x9a, 0xf5, 0xdd, 0xba, 0xd1, 0xbd, 0x84, 0xb9,
	0x1e, 0xe9, 0xfa, 0x21, 0x15, 0x6e, 0x7e, 0xf7, 0x9a, 0xb2, 0x67, 0xcd, 0x50, 0x8f, 0x73, 0x9b,
	0xd8, 0x1e, 0x2c, 0xd2, 0x33, 0x12, 0x31, 0x4e, 0x04, 0xe3, 0x05, 0x8f, 0xab, 0x56, 0x8f, 0x85,
	0x21, 0x3b, 0x6f, 0xb3, 0x03, 0x0b, 0x24, 0xb9, 0xf0, 0x03, 0x9f, 0xf0, 0xcb, 0x82, 0xcb, 0xb4,
	0x7d, 0x7b, 0xcb, 0xc8, 0x79, 0x93, 0x17, 0x30, 0x1f, 0x71, 0xd6, 0xa5, 0xab, 0x6e, 0x9f, 0xf8,
	0x41, 0xc2, 0xa9, 0x4b, 0x02, 0xc2, 0x07, 0x78, 0xc6, 0x12, 0x08, 0xa4, 0x99, 0xfb, 0x9a, 0xd8,
	0x91, 0xbc, 0x4c, 0xdf, 0x2e, 0xe9, 0x9b, 0x95, 0xfa, 0xb6, 0x55, 0xbf, 0x56, 0xd2, 0xcf, 0x56,
	0xea, 0xd7, 0x0a, 0x7a, 0x39, 0x75, 0xfd, 0xd0, 0x1f, 0x24, 0x83, 0x7c, 0x08, 0x8c, 0x09, 0xb2,
	0x4e, 0x5d, 0x4d, 0xcf, 0x05, 0x41, 0x3b, 0xed, 0x03, 0x1e, 0x90, 0x8b, 0x9c, 0x53, 0xce, 0x68,
	0xce, 0x62, 0xb4, 0x68, 0xd8, 0xc7, 0x19, 0x59, 0xfb, 0xfc, 0x1e, 0x6e, 0xf7, 0x58, 0xe8, 0xd1,
	0x30, 0x2e, 0x26, 0xb7, 0x34, 0xc0, 0x79, 0x8b, 0xe5, 0x52, 0x26, 0xcc, 0xf5, 0xae, 0x30, 0xdc,
	0xe7, 0x30, 0x37, 0x34, 0x8f, 0x32, 0xb3, 0x05, 0x8b, 0xd9, 0x6c, 0x46, 0x7c, 0x9b, 0xaa, 0x1f,
	0x02, 0xa8, 0xed, 0x42, 0x8b, 0x16, 0x2d, 0xa2, 0x49, 0x89, 0x0f, 0xe3, 0xf1, 0xf1, 0xa6, 0xa0,
	0xa5, 0xd7, 0xac, 0xf1, 0x28, 0xef, 0x09, 0x99, 0x4f, 0x6e, 0x4b, 0xe8, 0x06, 0xac, 0xf7, 0x81,
	0x7a, 0xc6, 0x07, 0xdb, 0x7c, 0x86, 0xec, 0x6d, 0x4d, 0xce, 0x86, 0xae, 0x0e, 0x79, 0xa5, 0x38,
	0x5e, 0xb7, 0x0d, 0x5d, 0x11, 0x0b, 0x81, 0x5b, 0x87, 0x19, 0x2e, 0x7a, 0xae, 0xba, 0x8a, 0x1b,
	0xe5, 0x0d, 0x8b, 0xf2, 0x2a, 0x17, 0xbd, 0x3d, 0xc9, 0xd1, 0xaa, 0xd7, 0xf0, 0x85, 0x3e, 0x0c,
	0xba, 0x31, 0x39, 0x93, 0xe5, 0x88, 0xd3, 0x93, 0x24, 0x50, 0xcb, 0xb6, 0x1f, 0x90, 0x13, 0xfc,
	0xb9, 0xc5, 0xe2, 0xba, 0x56, 0x1c, 0x29, 0x81, 0x93, 0xf2, 0xf7, 0x03, 0x72, 0x82, 0x5c, 0xb8,
	0x57, 0xb6, 0x23, 0x81, 0x3e, 0x6d, 0x95, 0x8c, 0xbf, 0xb0, 0x18, 0x7f, 0x59, 0x34, 0x26, 0x81,
	0x2c, 0xbf, 0xc5, 0x06, 0x7e, 0x0d, 0xb7, 0x62, 0xca, 0xe5, 0x1d, 0xd7, 0x35, 0x57, 0xd6, 0xb2,
	0xf1, 0x4d, 0x8b, 0xf1, 0xe7, 0x46, 0xe3, 0x68, 0x49, 0xd1, 0xf2, 0x97, 0x70, 0x3d, 0x57, 0x4c,
	0x4b, 0x6e, 0xb7, 0x6c, 0xf9, 0xcb, 0x6a, 0x6a, 0xd1, 0xe8, 0x08, 0x96, 0x42, 0x7a, 0xae, 0x63,
	0xef, 0x0a, 0x26, 0xc7, 0xee, 0x95, 0xfd, 0x7e, 0x66, 0xeb, 0x5d, 0x48, 0xcf, 0x55, 0x36, 0x8e,
	0x99, 0x43, 0x89, 0x57, 0x34, 0x7d, 0x03, 0x37, 0x8b, 0xd5, 0xa2, 0xec, 0xb8, 0x64, 0x71, 0xbc,
	0xe1, 0xe5, 0xcb, 0x46, 0xd1, 0xf0, 0x39, 0x20, 0x95, 0x8f, 0x24, 0x14, 0x7e, 0x90, 0x56, 0x22,
	0xfc, 0xa5, 0xfd, 0xbe, 0x2a, 0x99, 0xef, 0x24, 0xd1, 0xd4, 0x21, 0xb4, 0x0f, 0xd7, 0xd2, 0xd3,
	0x7c, 0xb9, 0xa8, 0xb7, 0xec, 0x5b, 0xbb, 0xa1, 0x97, 0xea, 0xba, 0xba, 0x6e, 0x65, 0x6b, 0xc6,
	0xa3, 0x01, 0xb9, 0xc4, 0xb7, 0xab, 0xae, 0x5b, 0x29, 0x6f, 0x57, 0xd2, 0xe4, 0x86, 0x5a, 0x9c,
	0x63, 0xa6, 0xb2, 0xdd, 0xb1, 0x6d, 0xa8, 0xf9, 0x19, 0x65, 0xaa, 0xdb, 0x36, 0x2c, 0x96, 0xa7,
	0x90, 0x71, 0xb8, 0x6b, 0x71, 0x98, 0x2f, 0x4e, 0x1d, 0xe3, 0xf1, 0x07, 0xb8, 0xcb, 0x69, 0xec,
	0xcb, 0xf3, 0x72, 0xec, 0x92, 0x9e, 0xf0, 0xcf, 0x88, 0xa0, 0x9e, 0xdb, 0xbd, 0x74, 0xe5, 0x51,
	0xe9, 0x03, 0xcd, 0x0e, 0x65, 0xf7, 0x6c, 0x9b, 0x60, 0x26, 0xed, 0xa4, 0xca, 0xed, 0xcb, 0x4e,
	0x72, 0xf1, 0x1d, 0xbd, 0x1c, 0x76, 0x31, 0x57, 0x3f, 0xcf, 0x48, 0x70, 0x46, 0xcd, 0xc5, 0xff,
	0xbe, 0xad, 0x8b, 0x43, 0xee, 0x7b, 0x49, 0xd5, 0xa7, 0xcd, 0x17, 0x30, 0x6f, 0x39, 0x6d, 0x50,
	0xfc, 0xc0, 0x16, 0xa6, 0x8f, 0x0e, 0x1b, 0x34, 0x77, 0x78, 0x08, 0x92, 0x0b, 0xa3, 0xfd, 0xaa,
	0xfa, 0xf0, 0xf0, 0x2a, 0xb9, 0x28, 0xeb, 0x48, 0xa6, 0x5b, 0xae, 0xd6, 0x75, 0x52, 0xdd, 0x06,
	0xcc, 0x0c, 0x43, 0xaa, 0x65, 0x0f, 0x6d, 0xb2, 0x8c, 0xa4, 0x65, 0x5f, 0x03, 0x4a, 0x9b, 0x53,
	0xeb, 0x4e, 0x2b, 0x7f, 0x6e, 0x3b, 0x90, 0x99, 0x06, 0x25, 0x4d, 0x6b, 0x77, 0xe1, 0x5a, 0x4c,
	0x65, 0x11, 0x71, 0x4b, 0x47, 0x3a, 0x8a, 0x1f, 0xd9, 0xce, 0x96, 0x9a, 0xbc, 0x53, 0x38, 0xd7,
	0xa9, 0x1b, 0x5b, 0xf6, 0xc5, 0xe0, 0xb1, 0xfd, 0xc6, 0x96, 0xe2, 0xe8, 0x16, 0xd4, 0xf9, 0x2a,
	0xfe, 0x85, 0x95, 0x55, 0xe7, 0xab, 0x0a, 0x6f, 0xe3, 0x95, 0x0a, 0xbc, 0xad, 0xf0, 0x75, 0xbc,
	0x5a, 0x81, 0xaf, 0x4b, 0x7c, 0x67, 0x05, 0xb7, 0xed, 0x78, 0x6f, 0x45, 0xe1, 0xab, 0x78, 0xad,
	0x02, 0x57, 0xed, 0x7b, 0x2b, 0x78, 0xdd, 0x8e, 0x7b, 0x4a, 0xef, 0xad, 0xe1, 0x8d, 0x0a, 0x7c,
	0x4d, 0xe1, 0x1b, 0x78, 0xb3, 0x02, 0xdf, 0x50, 0xf8, 0x13, 0xfc, 0xa4, 0x02, 0x7f, 0x82, 0x6e,
	0x42, 0xdd, 0x7b, 0x8a, 0x9f, 0xda, 0x2e, 0x17, 0x75, 0xef, 0xa9, 0x84, 0x3b, 0x2b, 0x78, 0xcb,
	0x0a, 0x13, 0xd5, 0xbb, 0xce, 0x2a, 0xfe, 0xda, 0xee, 0x4e, 0x56, 0x95, 0xbc, 0x8d, 0x9f, 0xd9,
	0xe5, 0x6d, 0x05, 0xaf, 0xe1, 0xe7, 0x76, 0x58, 0x8d, 0xad, 0xb3, 0x8e, 0xbf, 0xa9, 0x70, 0x5f,
	0x57, 0xf2, 0x0d, 0xfc, 0xc2, 0x2e, 0x57, 0x43, 0xef, 0x6c, 0xe2, 0x97, 0x15, 0xf2, 0x4d, 0x85,
	0x3f, 0xc1, 0xdf, 0x56, 0xe0, 0x4f, 0x14, 0xfe, 0x14, 0x77, 0x2a, 0xf0, 0xa7, 0x0a, 0xdf, 0xc2,
	0xdb, 0x15, 0xf8, 0x96, 0xec, 0xde, 0xfe, 0x0a, 0xde, 0xb1, 0x76, 0xaf, 0xaf, 0x62, 0xb7, 0xbf,
	0x8a, 0x77, 0xed, 0xf2, 0xbe, 0x8a, 0xdd, 0x7e, 0x1b, 0xef, 0xd9, 0xe5, 0x6d, 0x34, 0x0d, 0xf5,
	0xfd, 0x35, 0xbc, 0xaf, 0x3e, 0x26, 0xd7, 0xfb, 0x6b, 0xcb, 0x8f, 0x60, 0xc2, 0x7c, 0x6a, 0x44,
	0x0d, 0xf5, 0xb3, 0x93, 0x08, 0xd6, 0xfc, 0x0c, 0x4d, 0xc2, 0xd8, 0x3e, 0x09, 0xdf, 0x84, 0xcd,
	0x1a, 0x02, 0x18, 0x97, 0x3f, 0xfb, 0xfd, 0x66, 0x7d, 0xf9, 0xb7, 0x70, 0x25, 0xfd, 0xe2, 0x88,
	0x66, 0xa0, 0x91, 0xfe, 0x96, 0xe0, 0x67, 0x68, 0x1e, 0x9a, 0xe9, 0x8b, 0x03, 0x4a, 0xc4, 0x9b,
	0x30, 0xb8, 0x6c, 0xd6, 0xf2, 0x6f, 0x77, 0x18, 0x0b, 0xd4, 0xdb, 0x3a, 0x6a, 0xc2, 0x54, 0xfa,
	0x56, 0xb5, 0x38, 0xb2, 0xfc, 0xd7, 0x1a, 0x4c, 0x66, 0x9f, 0x29, 0x53, 0x5c, 0x3d, 0x68, 0xf7,
	0x6b, 0x30, 0x97, 0xbd, 0xc9, 0xbe, 0x44, 0xae, 0x36, 0x6b, 0x05, 0x20, 0xfb, 0xc6, 0xb8, 0xda,
	0xac, 0xdb, 0x15, 0xed, 0xe6, 0x88, 0x5d, 0xd1, 0x6e, 0x8e, 0x76, 0xc7, 0xd5, 0x7f, 0x47, 0x6b,
	0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xea, 0xdb, 0x2c, 0xc6, 0x65, 0x1a, 0x00, 0x00,
}
