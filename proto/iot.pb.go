// Code generated by protoc-gen-go. DO NOT EDIT.
// source: iot.proto

package xbospb

/*
This is designed to be included by the main xbos proto file and includes the
definitions for the XBOS IoT devices

Maintainer: Gabe Fierro
Version 1.0
*/

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FanMode int32

const (
	FanMode_FanAuto FanMode = 0
	FanMode_FanOn   FanMode = 1
	FanMode_FanOff  FanMode = 2
)

var FanMode_name = map[int32]string{
	0: "FanAuto",
	1: "FanOn",
	2: "FanOff",
}
var FanMode_value = map[string]int32{
	"FanAuto": 0,
	"FanOn":   1,
	"FanOff":  2,
}

func (x FanMode) String() string {
	return proto.EnumName(FanMode_name, int32(x))
}
func (FanMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_iot_bb908b0a73495768, []int{0}
}

type HVACMode int32

const (
	HVACMode_HVACModeOff      HVACMode = 0
	HVACMode_HVACModeHeatOnly HVACMode = 1
	HVACMode_HVACModeCoolOnly HVACMode = 2
	HVACMode_HVACModeAuto     HVACMode = 3
)

var HVACMode_name = map[int32]string{
	0: "HVACModeOff",
	1: "HVACModeHeatOnly",
	2: "HVACModeCoolOnly",
	3: "HVACModeAuto",
}
var HVACMode_value = map[string]int32{
	"HVACModeOff":      0,
	"HVACModeHeatOnly": 1,
	"HVACModeCoolOnly": 2,
	"HVACModeAuto":     3,
}

func (x HVACMode) String() string {
	return proto.EnumName(HVACMode_name, int32(x))
}
func (HVACMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_iot_bb908b0a73495768, []int{1}
}

type HVACState int32

const (
	HVACState_HVACStateOff        HVACState = 0
	HVACState_HVACStateHeatStage1 HVACState = 1
	HVACState_HVACStateCoolStage1 HVACState = 2
	HVACState_HVACStateHeatStage2 HVACState = 3
	HVACState_HVACStateCoolStage2 HVACState = 4
)

var HVACState_name = map[int32]string{
	0: "HVACStateOff",
	1: "HVACStateHeatStage1",
	2: "HVACStateCoolStage1",
	3: "HVACStateHeatStage2",
	4: "HVACStateCoolStage2",
}
var HVACState_value = map[string]int32{
	"HVACStateOff":        0,
	"HVACStateHeatStage1": 1,
	"HVACStateCoolStage1": 2,
	"HVACStateHeatStage2": 3,
	"HVACStateCoolStage2": 4,
}

func (x HVACState) String() string {
	return proto.EnumName(HVACState_name, int32(x))
}
func (HVACState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_iot_bb908b0a73495768, []int{2}
}

type URI struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *URI) Reset()         { *m = URI{} }
func (m *URI) String() string { return proto.CompactTextString(m) }
func (*URI) ProtoMessage()    {}
func (*URI) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_bb908b0a73495768, []int{0}
}
func (m *URI) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_URI.Unmarshal(m, b)
}
func (m *URI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_URI.Marshal(b, m, deterministic)
}
func (dst *URI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_URI.Merge(dst, src)
}
func (m *URI) XXX_Size() int {
	return xxx_messageInfo_URI.Size(m)
}
func (m *URI) XXX_DiscardUnknown() {
	xxx_messageInfo_URI.DiscardUnknown(m)
}

var xxx_messageInfo_URI proto.InternalMessageInfo

func (m *URI) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *URI) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Triple struct {
	Subject              *URI     `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Predicate            *URI     `protobuf:"bytes,2,opt,name=predicate,proto3" json:"predicate,omitempty"`
	Object               *URI     `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Triple) Reset()         { *m = Triple{} }
func (m *Triple) String() string { return proto.CompactTextString(m) }
func (*Triple) ProtoMessage()    {}
func (*Triple) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_bb908b0a73495768, []int{1}
}
func (m *Triple) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Triple.Unmarshal(m, b)
}
func (m *Triple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Triple.Marshal(b, m, deterministic)
}
func (dst *Triple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Triple.Merge(dst, src)
}
func (m *Triple) XXX_Size() int {
	return xxx_messageInfo_Triple.Size(m)
}
func (m *Triple) XXX_DiscardUnknown() {
	xxx_messageInfo_Triple.DiscardUnknown(m)
}

var xxx_messageInfo_Triple proto.InternalMessageInfo

func (m *Triple) GetSubject() *URI {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *Triple) GetPredicate() *URI {
	if m != nil {
		return m.Predicate
	}
	return nil
}

func (m *Triple) GetObject() *URI {
	if m != nil {
		return m.Object
	}
	return nil
}

type XBOSIoTDeviceState struct {
	// current time at device/service
	// unit:ns
	Time uint64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	// XBOS IoT devices
	Thermostat           *Thermostat `protobuf:"bytes,2,opt,name=thermostat,proto3" json:"thermostat,omitempty"`
	Meter                *Meter      `protobuf:"bytes,3,opt,name=meter,proto3" json:"meter,omitempty"`
	Light                *Light      `protobuf:"bytes,4,opt,name=light,proto3" json:"light,omitempty"`
	Evse                 *EVSE       `protobuf:"bytes,5,opt,name=evse,proto3" json:"evse,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *XBOSIoTDeviceState) Reset()         { *m = XBOSIoTDeviceState{} }
func (m *XBOSIoTDeviceState) String() string { return proto.CompactTextString(m) }
func (*XBOSIoTDeviceState) ProtoMessage()    {}
func (*XBOSIoTDeviceState) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_bb908b0a73495768, []int{2}
}
func (m *XBOSIoTDeviceState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XBOSIoTDeviceState.Unmarshal(m, b)
}
func (m *XBOSIoTDeviceState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XBOSIoTDeviceState.Marshal(b, m, deterministic)
}
func (dst *XBOSIoTDeviceState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XBOSIoTDeviceState.Merge(dst, src)
}
func (m *XBOSIoTDeviceState) XXX_Size() int {
	return xxx_messageInfo_XBOSIoTDeviceState.Size(m)
}
func (m *XBOSIoTDeviceState) XXX_DiscardUnknown() {
	xxx_messageInfo_XBOSIoTDeviceState.DiscardUnknown(m)
}

var xxx_messageInfo_XBOSIoTDeviceState proto.InternalMessageInfo

func (m *XBOSIoTDeviceState) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *XBOSIoTDeviceState) GetThermostat() *Thermostat {
	if m != nil {
		return m.Thermostat
	}
	return nil
}

func (m *XBOSIoTDeviceState) GetMeter() *Meter {
	if m != nil {
		return m.Meter
	}
	return nil
}

func (m *XBOSIoTDeviceState) GetLight() *Light {
	if m != nil {
		return m.Light
	}
	return nil
}

func (m *XBOSIoTDeviceState) GetEvse() *EVSE {
	if m != nil {
		return m.Evse
	}
	return nil
}

type XBOSIoTContext struct {
	// current time at device/service
	// unit:ns
	Time uint64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	// any triples this device wants to add about itself
	// these triples will be assumed to be generated by the entity
	// who has created/signed this message
	Context              []*Triple `protobuf:"bytes,2,rep,name=context,proto3" json:"context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *XBOSIoTContext) Reset()         { *m = XBOSIoTContext{} }
func (m *XBOSIoTContext) String() string { return proto.CompactTextString(m) }
func (*XBOSIoTContext) ProtoMessage()    {}
func (*XBOSIoTContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_bb908b0a73495768, []int{3}
}
func (m *XBOSIoTContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XBOSIoTContext.Unmarshal(m, b)
}
func (m *XBOSIoTContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XBOSIoTContext.Marshal(b, m, deterministic)
}
func (dst *XBOSIoTContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XBOSIoTContext.Merge(dst, src)
}
func (m *XBOSIoTContext) XXX_Size() int {
	return xxx_messageInfo_XBOSIoTContext.Size(m)
}
func (m *XBOSIoTContext) XXX_DiscardUnknown() {
	xxx_messageInfo_XBOSIoTContext.DiscardUnknown(m)
}

var xxx_messageInfo_XBOSIoTContext proto.InternalMessageInfo

func (m *XBOSIoTContext) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *XBOSIoTContext) GetContext() []*Triple {
	if m != nil {
		return m.Context
	}
	return nil
}

// Thermostat
type Thermostat struct {
	// Current temperature recorded by thermostat
	// unit:celsius
	Temperature float64 `protobuf:"fixed64,1,opt,name=temperature,proto3" json:"temperature,omitempty"`
	// unit:% rh
	RelativeHumidity float64 `protobuf:"fixed64,2,opt,name=relative_humidity,json=relativeHumidity,proto3" json:"relative_humidity,omitempty"`
	// If true, then the thermostat is in override mode
	// unit: t/f
	Override bool `protobuf:"varint,3,opt,name=override,proto3" json:"override,omitempty"`
	// If true, the fan is on; else it is off
	// unit: t/f
	FanState bool `protobuf:"varint,4,opt,name=fan_state,json=fanState,proto3" json:"fan_state,omitempty"`
	// Current operating mode of the fan
	// unit: xbos/iot/FanMode
	FanMode FanMode `protobuf:"varint,5,opt,name=fan_mode,json=fanMode,proto3,enum=xbospb.FanMode" json:"fan_mode,omitempty"`
	// Current operating mode of the HVAC
	// unit: xbos/iot/HVACMode
	Mode HVACMode `protobuf:"varint,6,opt,name=mode,proto3,enum=xbospb.HVACMode" json:"mode,omitempty"`
	// Current HVAC state
	// unit: xbos/iot/HVACState
	State HVACState `protobuf:"varint,7,opt,name=state,proto3,enum=xbospb.HVACState" json:"state,omitempty"`
	// number of heat stages enabled
	EnabledHeatStages int32 `protobuf:"varint,8,opt,name=enabled_heat_stages,json=enabledHeatStages,proto3" json:"enabled_heat_stages,omitempty"`
	// number of cool stages enabled
	EnabledCoolStages    int32    `protobuf:"varint,9,opt,name=enabled_cool_stages,json=enabledCoolStages,proto3" json:"enabled_cool_stages,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Thermostat) Reset()         { *m = Thermostat{} }
func (m *Thermostat) String() string { return proto.CompactTextString(m) }
func (*Thermostat) ProtoMessage()    {}
func (*Thermostat) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_bb908b0a73495768, []int{4}
}
func (m *Thermostat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Thermostat.Unmarshal(m, b)
}
func (m *Thermostat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Thermostat.Marshal(b, m, deterministic)
}
func (dst *Thermostat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Thermostat.Merge(dst, src)
}
func (m *Thermostat) XXX_Size() int {
	return xxx_messageInfo_Thermostat.Size(m)
}
func (m *Thermostat) XXX_DiscardUnknown() {
	xxx_messageInfo_Thermostat.DiscardUnknown(m)
}

var xxx_messageInfo_Thermostat proto.InternalMessageInfo

func (m *Thermostat) GetTemperature() float64 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func (m *Thermostat) GetRelativeHumidity() float64 {
	if m != nil {
		return m.RelativeHumidity
	}
	return 0
}

func (m *Thermostat) GetOverride() bool {
	if m != nil {
		return m.Override
	}
	return false
}

func (m *Thermostat) GetFanState() bool {
	if m != nil {
		return m.FanState
	}
	return false
}

func (m *Thermostat) GetFanMode() FanMode {
	if m != nil {
		return m.FanMode
	}
	return FanMode_FanAuto
}

func (m *Thermostat) GetMode() HVACMode {
	if m != nil {
		return m.Mode
	}
	return HVACMode_HVACModeOff
}

func (m *Thermostat) GetState() HVACState {
	if m != nil {
		return m.State
	}
	return HVACState_HVACStateOff
}

func (m *Thermostat) GetEnabledHeatStages() int32 {
	if m != nil {
		return m.EnabledHeatStages
	}
	return 0
}

func (m *Thermostat) GetEnabledCoolStages() int32 {
	if m != nil {
		return m.EnabledCoolStages
	}
	return 0
}

type Meter struct {
	// unit: kW
	Power float64 `protobuf:"fixed64,1,opt,name=power,proto3" json:"power,omitempty"`
	// unit: V
	Voltage float64 `protobuf:"fixed64,2,opt,name=voltage,proto3" json:"voltage,omitempty"`
	// unit: kVA
	ApparentPower        float64  `protobuf:"fixed64,3,opt,name=apparent_power,json=apparentPower,proto3" json:"apparent_power,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Meter) Reset()         { *m = Meter{} }
func (m *Meter) String() string { return proto.CompactTextString(m) }
func (*Meter) ProtoMessage()    {}
func (*Meter) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_bb908b0a73495768, []int{5}
}
func (m *Meter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Meter.Unmarshal(m, b)
}
func (m *Meter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Meter.Marshal(b, m, deterministic)
}
func (dst *Meter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Meter.Merge(dst, src)
}
func (m *Meter) XXX_Size() int {
	return xxx_messageInfo_Meter.Size(m)
}
func (m *Meter) XXX_DiscardUnknown() {
	xxx_messageInfo_Meter.DiscardUnknown(m)
}

var xxx_messageInfo_Meter proto.InternalMessageInfo

func (m *Meter) GetPower() float64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *Meter) GetVoltage() float64 {
	if m != nil {
		return m.Voltage
	}
	return 0
}

func (m *Meter) GetApparentPower() float64 {
	if m != nil {
		return m.ApparentPower
	}
	return 0
}

type Light struct {
	// True if the light is on
	// unit: on/off
	State bool `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	// 100 is maximum brightness
	Brightness           int64    `protobuf:"varint,2,opt,name=brightness,proto3" json:"brightness,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Light) Reset()         { *m = Light{} }
func (m *Light) String() string { return proto.CompactTextString(m) }
func (*Light) ProtoMessage()    {}
func (*Light) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_bb908b0a73495768, []int{6}
}
func (m *Light) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Light.Unmarshal(m, b)
}
func (m *Light) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Light.Marshal(b, m, deterministic)
}
func (dst *Light) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Light.Merge(dst, src)
}
func (m *Light) XXX_Size() int {
	return xxx_messageInfo_Light.Size(m)
}
func (m *Light) XXX_DiscardUnknown() {
	xxx_messageInfo_Light.DiscardUnknown(m)
}

var xxx_messageInfo_Light proto.InternalMessageInfo

func (m *Light) GetState() bool {
	if m != nil {
		return m.State
	}
	return false
}

func (m *Light) GetBrightness() int64 {
	if m != nil {
		return m.Brightness
	}
	return 0
}

type EVSE struct {
	// maximum allowed current for charging
	// unit: A
	CurrentLimit float64 `protobuf:"fixed64,1,opt,name=current_limit,json=currentLimit,proto3" json:"current_limit,omitempty"`
	// active charge current
	// unit: A
	Current float64 `protobuf:"fixed64,2,opt,name=current,proto3" json:"current,omitempty"`
	// active charge voltage
	// unit: V
	Voltage float64 `protobuf:"fixed64,3,opt,name=voltage,proto3" json:"voltage,omitempty"`
	// seconds left until car is charged
	// unit: seconds
	ChargingTimeLeft int64 `protobuf:"varint,4,opt,name=charging_time_left,json=chargingTimeLeft,proto3" json:"charging_time_left,omitempty"`
	// charge state of the EVSE
	// unit: on/off
	State                bool     `protobuf:"varint,5,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EVSE) Reset()         { *m = EVSE{} }
func (m *EVSE) String() string { return proto.CompactTextString(m) }
func (*EVSE) ProtoMessage()    {}
func (*EVSE) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_bb908b0a73495768, []int{7}
}
func (m *EVSE) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EVSE.Unmarshal(m, b)
}
func (m *EVSE) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EVSE.Marshal(b, m, deterministic)
}
func (dst *EVSE) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EVSE.Merge(dst, src)
}
func (m *EVSE) XXX_Size() int {
	return xxx_messageInfo_EVSE.Size(m)
}
func (m *EVSE) XXX_DiscardUnknown() {
	xxx_messageInfo_EVSE.DiscardUnknown(m)
}

var xxx_messageInfo_EVSE proto.InternalMessageInfo

func (m *EVSE) GetCurrentLimit() float64 {
	if m != nil {
		return m.CurrentLimit
	}
	return 0
}

func (m *EVSE) GetCurrent() float64 {
	if m != nil {
		return m.Current
	}
	return 0
}

func (m *EVSE) GetVoltage() float64 {
	if m != nil {
		return m.Voltage
	}
	return 0
}

func (m *EVSE) GetChargingTimeLeft() int64 {
	if m != nil {
		return m.ChargingTimeLeft
	}
	return 0
}

func (m *EVSE) GetState() bool {
	if m != nil {
		return m.State
	}
	return false
}

func init() {
	proto.RegisterType((*URI)(nil), "xbospb.URI")
	proto.RegisterType((*Triple)(nil), "xbospb.Triple")
	proto.RegisterType((*XBOSIoTDeviceState)(nil), "xbospb.XBOSIoTDeviceState")
	proto.RegisterType((*XBOSIoTContext)(nil), "xbospb.XBOSIoTContext")
	proto.RegisterType((*Thermostat)(nil), "xbospb.Thermostat")
	proto.RegisterType((*Meter)(nil), "xbospb.Meter")
	proto.RegisterType((*Light)(nil), "xbospb.Light")
	proto.RegisterType((*EVSE)(nil), "xbospb.EVSE")
	proto.RegisterEnum("xbospb.FanMode", FanMode_name, FanMode_value)
	proto.RegisterEnum("xbospb.HVACMode", HVACMode_name, HVACMode_value)
	proto.RegisterEnum("xbospb.HVACState", HVACState_name, HVACState_value)
}

func init() { proto.RegisterFile("iot.proto", fileDescriptor_iot_bb908b0a73495768) }

var fileDescriptor_iot_bb908b0a73495768 = []byte{
	// 731 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x54, 0xc1, 0x6e, 0xdb, 0x38,
	0x10, 0x8d, 0x2c, 0xcb, 0xb6, 0xc6, 0x89, 0xa3, 0x30, 0x01, 0xd6, 0xd8, 0x5d, 0x2c, 0x0c, 0x65,
	0x83, 0xf5, 0x7a, 0xb7, 0x06, 0xe2, 0x9e, 0x7a, 0xe8, 0x21, 0x4d, 0x13, 0x24, 0x40, 0xd2, 0x14,
	0xb4, 0x13, 0xb4, 0x97, 0x1a, 0xb4, 0x3c, 0xb6, 0x55, 0x48, 0xa2, 0x20, 0xd1, 0x6e, 0x72, 0x2a,
	0xfa, 0x2d, 0xfd, 0x99, 0xfe, 0x4d, 0x7f, 0xa1, 0x20, 0x29, 0x3a, 0x72, 0x9b, 0xdb, 0xcc, 0x7b,
	0x8f, 0x33, 0x7c, 0xc3, 0x91, 0xc0, 0x0d, 0xb9, 0xe8, 0xa7, 0x19, 0x17, 0x9c, 0xd4, 0xee, 0x27,
	0x3c, 0x4f, 0x27, 0xfe, 0x0b, 0xb0, 0x6f, 0xe9, 0x25, 0xf9, 0x13, 0xdc, 0x84, 0xc5, 0x98, 0xa7,
	0x2c, 0xc0, 0xb6, 0xd5, 0xb1, 0xba, 0x2e, 0x7d, 0x04, 0xc8, 0x01, 0x38, 0x2b, 0x16, 0x2d, 0xb1,
	0x5d, 0x51, 0x8c, 0x4e, 0xfc, 0xcf, 0x50, 0x1b, 0x65, 0x61, 0x1a, 0x21, 0x39, 0x82, 0x7a, 0xbe,
	0x9c, 0x7c, 0xc4, 0x40, 0xa8, 0xb3, 0xcd, 0x41, 0xb3, 0xaf, 0xcb, 0xf7, 0x6f, 0xe9, 0x25, 0x35,
	0x1c, 0xf9, 0x17, 0xdc, 0x34, 0xc3, 0x69, 0x18, 0x30, 0xa1, 0x4b, 0xfd, 0x24, 0x7c, 0x64, 0xc9,
	0x21, 0xd4, 0xb8, 0x2e, 0x68, 0xff, 0xaa, 0x2b, 0x28, 0xff, 0x9b, 0x05, 0xe4, 0xdd, 0xab, 0x9b,
	0xe1, 0x25, 0x1f, 0xbd, 0xc6, 0x55, 0x18, 0xe0, 0x50, 0xc8, 0xb3, 0x04, 0xaa, 0x22, 0x8c, 0xb5,
	0x8d, 0x2a, 0x55, 0x31, 0x19, 0x00, 0x88, 0x05, 0x66, 0x31, 0xcf, 0x05, 0x13, 0x45, 0x6f, 0x62,
	0x6a, 0x8e, 0xd6, 0x0c, 0x2d, 0xa9, 0xc8, 0x21, 0x38, 0x31, 0x0a, 0xcc, 0x8a, 0x2b, 0xec, 0x18,
	0xf9, 0xb5, 0x04, 0xa9, 0xe6, 0xa4, 0x28, 0x0a, 0xe7, 0x0b, 0xd1, 0xae, 0x6e, 0x8a, 0xae, 0x24,
	0x48, 0x35, 0x47, 0x3a, 0x50, 0xc5, 0x55, 0x8e, 0x6d, 0x47, 0x69, 0xb6, 0x8d, 0xe6, 0xec, 0x6e,
	0x78, 0x46, 0x15, 0xe3, 0xbf, 0x81, 0x56, 0xe1, 0xe4, 0x94, 0x27, 0x02, 0xef, 0xc5, 0x93, 0x2e,
	0xba, 0x50, 0x0f, 0x34, 0xdd, 0xae, 0x74, 0xec, 0x6e, 0x73, 0xd0, 0x5a, 0x5b, 0x50, 0x0f, 0x41,
	0x0d, 0xed, 0x7f, 0xaf, 0x00, 0x3c, 0xda, 0x22, 0x1d, 0x68, 0x0a, 0x8c, 0x53, 0xcc, 0x98, 0x58,
	0x66, 0xba, 0xa6, 0x45, 0xcb, 0x10, 0xf9, 0x0f, 0xf6, 0x32, 0x8c, 0x98, 0x08, 0x57, 0x38, 0x5e,
	0x2c, 0xe3, 0x70, 0x1a, 0x8a, 0x07, 0x35, 0x27, 0x8b, 0x7a, 0x86, 0xb8, 0x28, 0x70, 0xf2, 0x3b,
	0x34, 0xf8, 0x0a, 0xb3, 0x2c, 0x9c, 0xa2, 0x1a, 0x4e, 0x83, 0xae, 0x73, 0xf2, 0x07, 0xb8, 0x33,
	0x96, 0x8c, 0x65, 0x5b, 0x54, 0x43, 0x69, 0xd0, 0xc6, 0x8c, 0x25, 0xfa, 0x69, 0x7a, 0x20, 0xe3,
	0x71, 0xcc, 0xa7, 0x7a, 0x18, 0xad, 0xc1, 0xae, 0x71, 0x70, 0xce, 0x92, 0x6b, 0x3e, 0x45, 0x5a,
	0x9f, 0xe9, 0x80, 0xfc, 0x0d, 0x55, 0xa5, 0xab, 0x29, 0x9d, 0x67, 0x74, 0x17, 0x77, 0x27, 0xa7,
	0x4a, 0xa8, 0x58, 0xf2, 0x0f, 0x38, 0xba, 0x55, 0x5d, 0xc9, 0xf6, 0xca, 0x32, 0xd5, 0x93, 0x6a,
	0x9e, 0xf4, 0x61, 0x1f, 0x13, 0x36, 0x89, 0x70, 0x3a, 0x5e, 0x20, 0x13, 0xf2, 0x82, 0x73, 0xcc,
	0xdb, 0x8d, 0x8e, 0xd5, 0x75, 0xe8, 0x5e, 0x41, 0x5d, 0x20, 0x13, 0x43, 0x45, 0x94, 0xf5, 0x01,
	0xe7, 0x91, 0xd1, 0xbb, 0x1b, 0xfa, 0x53, 0xce, 0x23, 0xad, 0xf7, 0x3f, 0x80, 0xa3, 0x16, 0x43,
	0x7e, 0x2c, 0x29, 0xff, 0x84, 0x59, 0x31, 0x65, 0x9d, 0x90, 0x36, 0xd4, 0x57, 0x3c, 0x92, 0xd2,
	0x62, 0xaa, 0x26, 0x25, 0x47, 0xd0, 0x62, 0x69, 0xca, 0x32, 0x4c, 0xc4, 0x58, 0x1f, 0xb4, 0x95,
	0x60, 0xc7, 0xa0, 0x6f, 0x25, 0xe8, 0xbf, 0x04, 0x47, 0xed, 0x94, 0xac, 0xaf, 0x1d, 0x5b, 0x6a,
	0xb8, 0x85, 0xbd, 0xbf, 0x00, 0x26, 0x99, 0xe4, 0x13, 0xcc, 0x73, 0xd5, 0xc2, 0xa6, 0x25, 0xc4,
	0xff, 0x6a, 0x41, 0x55, 0xee, 0x1b, 0x39, 0x84, 0x9d, 0x60, 0x99, 0xa9, 0x6e, 0x51, 0x18, 0x87,
	0xa2, 0xb8, 0xe6, 0x76, 0x01, 0x5e, 0x49, 0x4c, 0xde, 0xb6, 0xc8, 0xcd, 0x6d, 0x8b, 0xb4, 0xec,
	0xc3, 0xde, 0xf4, 0xf1, 0x3f, 0x90, 0x60, 0xc1, 0xb2, 0x79, 0x98, 0xcc, 0xc7, 0x72, 0x5b, 0xc7,
	0x11, 0xce, 0xf4, 0x67, 0x61, 0x53, 0xcf, 0x30, 0xa3, 0x30, 0xc6, 0x2b, 0x9c, 0x95, 0x5c, 0x38,
	0x25, 0x17, 0xbd, 0x67, 0x50, 0x2f, 0xf6, 0x80, 0x34, 0x55, 0x78, 0xb2, 0x14, 0xdc, 0xdb, 0x22,
	0x2e, 0x38, 0xe7, 0x2c, 0xb9, 0x49, 0x3c, 0x8b, 0x00, 0xd4, 0x64, 0x38, 0x9b, 0x79, 0x95, 0xde,
	0x7b, 0x68, 0x98, 0x75, 0x20, 0xbb, 0xd0, 0x34, 0xb1, 0x24, 0xb7, 0xc8, 0x01, 0x78, 0x06, 0x90,
	0xcf, 0x7a, 0x93, 0x44, 0x0f, 0x9e, 0x55, 0x46, 0xe5, 0xe3, 0x29, 0xb4, 0x42, 0x3c, 0xd8, 0x36,
	0xa8, 0xea, 0x68, 0xf7, 0xbe, 0x58, 0xe0, 0xae, 0x77, 0xc8, 0xf0, 0x2a, 0xd1, 0xd5, 0x7f, 0x83,
	0xfd, 0x35, 0xb2, 0xde, 0x9a, 0x63, 0xcf, 0xda, 0x20, 0xd6, 0xeb, 0x71, 0xec, 0x55, 0x9e, 0x3e,
	0x31, 0xf0, 0xec, 0xa7, 0x4f, 0x0c, 0xbc, 0xea, 0xa4, 0xa6, 0x7e, 0xd5, 0xcf, 0x7f, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x8a, 0x6f, 0x56, 0xf0, 0xb7, 0x05, 0x00, 0x00,
}
